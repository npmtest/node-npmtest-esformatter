{"/home/travis/build/npmtest/node-npmtest-esformatter/test.js":"/* istanbul instrument in package npmtest_esformatter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-esformatter/lib.npmtest_esformatter.js":"/* istanbul instrument in package npmtest_esformatter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_esformatter = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_esformatter = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-esformatter/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-esformatter && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_esformatter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_esformatter\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_esformatter.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_esformatter.rollup.js'] =\n            local.assetsDict['/assets.npmtest_esformatter.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_esformatter.__dirname + '/lib.npmtest_esformatter.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/esformatter.js":"'use strict';\n\n// non-destructive changes to EcmaScript code using an \"enhanced\" AST for the\n// process, it updates the tokens in place and add/remove spaces & line breaks\n// based on user settings.\n// not using any kind of code rewrite based on string concatenation to avoid\n// breaking the program correctness and/or undesired side-effects.\n\nvar plugins = require('./plugins');\n\nexports.diff = require('./diff');\nexports.hooks = require('./hooks');\nexports.format = require('./format');\nexports.transform = require('./transform');\nexports.rc = require('./options').getRc;\nexports.register = plugins.register;\nexports.unregister = plugins.unregister;\nexports.unregisterAll = plugins.unregisterAll;\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/plugins.js":"\"use strict\";\n\nvar isObject = require('mout/lang/isObject');\nvar partial = require('mout/function/partial');\nvar remove = require('mout/array/remove');\n\nvar _plugins = [];\n\n\nexports.register = register;\nfunction register(plugin) {\n  if (_plugins.indexOf(plugin) === -1) {\n    _plugins.push(plugin);\n  }\n}\n\n\nexports.unregister = partial(remove, _plugins);\n\n\nexports.unregisterAll = unregisterAll;\nfunction unregisterAll() {\n  _plugins = [];\n}\n\n\nexports.setOptions = function(opts) {\n  loadAndRegister(opts && opts.plugins);\n  // esformatter ends up being a circular dependency,\n  // but this was the quickest way of doing it :P\n  // needed specially because of issue #348\n  exec('setOptions', opts, require('./esformatter'));\n};\n\n\nexports.loadAndRegister = loadAndRegister;\nfunction loadAndRegister(idsOrModules) {\n  idsOrModules = idsOrModules || [];\n  idsOrModules.forEach(function(idOrModule) {\n    var module = isObject(idOrModule) ?\n      idOrModule :\n      loadModule(idOrModule);\n    register(module);\n  });\n}\n\n\nfunction loadModule(id) {\n  try {\n    return require(id);\n  } catch (e) {\n    throw new Error(\n      'Error: Cannot find plugin \\'' + id + '\\'.' + ' Make sure ' +\n      'you used the correct name on the config file or run `npm install ' +\n      '--save-dev ' + id + '` to add it as a project dependency.'\n    );\n  }\n}\n\n\nexportMethods([\n  'tokenBefore',\n  'tokenAfter',\n  'nodeBefore',\n  'nodeAfter',\n  // \"transform\" is an alias to \"transformAfter\" but we do not recommend using\n  // it going forward. it might be deprecated in the future.\n  'transform',\n  'transformAfter',\n  'transformBefore'\n], exec);\n\nexportMethods([\n  'stringBefore',\n  'stringAfter'\n], pipe);\n\n\nfunction exportMethods(arr, fn) {\n  arr.forEach(function(methodName) {\n    exports[methodName] = partial(fn, methodName);\n  });\n}\n\n\nfunction exec(methodName) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  _plugins.forEach(function(plugin) {\n    if (methodName in plugin) {\n      plugin[methodName].apply(plugin, args);\n    }\n  });\n}\n\n\nfunction pipe(methodName, input) {\n  return _plugins.reduce(function(output, plugin) {\n    return methodName in plugin ? plugin[methodName](output) : output;\n  }, input);\n}\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/diff.js":"'use strict';\n\nvar format = require('./format');\nvar disparity = require('disparity');\n\nvar hr = '==================================================================' +\n  '==============';\n\n// these headers make more sense in this context\ndisparity.added = 'expected';\ndisparity.removed = 'actual';\n\nexports.chars = chars;\nfunction chars(str, opts, fileName) {\n  var result = disparity.chars(str, format(str, opts));\n  if (!result) {\n    return '';\n  }\n  // we add a line break at the end because it looks better\n  return getHeader(fileName) + result + '\\n';\n}\n\nfunction getHeader(fileName) {\n  return fileName ? cyan(fileName) + '\\n' + cyan(hr) + '\\n' : '';\n}\n\nfunction cyan(str) {\n  return '\\u001b[36m' + str + '\\u001b[39m';\n}\n\nexports.unified = unified;\nfunction unified(str, opts, fileName) {\n  return disparity.unified(str, format(str, opts), {\n    paths: [fileName]\n  });\n}\n\nexports.unifiedNoColor = unifiedNoColor;\nfunction unifiedNoColor(str, opts, fileName) {\n  return disparity.unifiedNoColor(str, format(str, opts), {\n    paths: [fileName]\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/format.js":"'use strict';\n\nvar _options = require('./options');\n\nvar npmRun = require('npm-run');\nvar parser = require('esformatter-parser');\nvar plugins = require('./plugins');\nvar transform = require('./transform');\n\nexports = module.exports = format;\nfunction format(str, opts) {\n  // we need to load and register the plugins as soon as possible otherwise\n  // `stringBefore` won't be called and default settings won't be used\n  _options.set(opts);\n\n  // remove shebang before pipe because piped commands might not know how\n  // to handle it\n  var prefix = getShebang(str);\n  if (prefix && !_options.get('esformatter.allowShebang')) {\n    throw new Error(\n      'shebang not allowed! Set esformatter.allowShebang to true if you ' +\n      'want to support it.'\n    );\n  }\n  str = str.replace(prefix, '');\n\n  var pipeCommands = _options.get('pipe');\n\n  if (pipeCommands) {\n    str = pipe(pipeCommands.before, str).toString();\n  }\n\n  str = doFormat(str, opts);\n\n  if (pipeCommands) {\n    str = pipe(pipeCommands.after, str).toString();\n  }\n\n  // we only restore bang after pipe because piped commands might not know how\n  // to handle it\n  return prefix + str;\n}\n\n\n// allows users to override parser if needed\nexports.parseFn = function(str, opts) {\n  return parser.parse(str, opts);\n};\n\n\nexports.parseOptions = parser.defaultOptions;\n\n\nfunction getShebang(str) {\n  var result = (/^#!.+\\n/).exec(str);\n  return result ? result[0] : '';\n}\n\n\nfunction doFormat(str) {\n  str = plugins.stringBefore(str);\n  // allows user to override the parser\n  var ast = exports.parseFn(str, exports.parseOptions);\n  transform(ast, transform.BYPASS_OPTIONS);\n  str = ast.toString();\n  str = plugins.stringAfter(str);\n  return str;\n}\n\n\n// run cli tools in series passing the stdout of previous tool as stdin of next\n// one\nfunction pipe(commands, input) {\n  if (!commands) {\n    return input;\n  }\n  return commands.reduce(function(input, cmd) {\n    return npmRun.sync(cmd, {\n      input: input\n    });\n  }, input);\n}\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/options.js":"\"use strict\";\n\nvar stripJsonComments = require('strip-json-comments');\nvar fs = require('fs');\nvar path = require('path');\nvar resolve = require('resolve').sync;\n\nvar _ws = require('rocambole-whitespace');\nvar _br = require('rocambole-linebreak');\nvar indent = require('./indent');\nvar plugins = require('./plugins');\n\nvar deepMixIn = require('mout/object/deepMixIn');\nvar merge = require('mout/object/merge');\nvar get = require('mout/object/get');\nvar isObject = require('mout/lang/isObject');\nvar userHome = require('user-home');\nvar isEmpty = require('mout/lang/isEmpty');\nvar toArray = require('mout/lang/toArray');\n\n// ---\n\nvar _curOpts;\nvar _presetReg = /^preset:/;\n\n// ---\n\nexports.presets = {\n  'default': require('./preset/default'),\n  'jquery': require('./preset/jquery')\n};\n\n\nexports.set = function(opts) {\n  var preset = opts && opts.preset ? opts.preset : 'default';\n  // we need to pass all the user settings and default settings to the plugins\n  // so they are able to toggle the behavior and make changes based on the\n  // options\n  _curOpts = mergePreset(preset, opts);\n\n  // FIXME: deprecate AlignComments on v1.0\n  // on v0.6.0 we named the property starting with uppercase \"A\" by mistake, so\n  // now we need to support both styles to keep consistency :(\n  if (_curOpts.indent && 'AlignComments' in _curOpts.indent) {\n    _curOpts.indent.alignComments = _curOpts.indent.AlignComments;\n  }\n\n  _ws.setOptions(_curOpts.whiteSpace);\n  _br.setOptions(_curOpts.lineBreak);\n  indent.setOptions(_curOpts.indent);\n  plugins.setOptions(_curOpts);\n\n  // user provided options should override default settings and also any\n  // changes made by plugins\n  if (opts) {\n    _curOpts = deepMixIn(_curOpts, opts);\n  }\n};\n\n\nfunction mergePreset(preset, opts) {\n  if (!(preset in exports.presets)) {\n    throw new Error('Invalid preset file \"' + preset + '\".');\n  }\n  var baseOpts = processExtends(null, exports.presets[preset]);\n  return mergeOptions(baseOpts, opts);\n}\n\n\nfunction mergeOptions(base, override) {\n  var result = merge(base, override);\n  // plugins is cumulative, so if we are extending a config that sets plugins we\n  // should merge them (that way it will load/execute all the plugins)\n  result.plugins = [].concat(base && base.plugins, override && override.plugins)\n    .filter(function(p) {\n      return p != null;\n    });\n  return result;\n}\n\n\nexports.get = function(prop) {\n  return prop ? get(_curOpts, prop) : _curOpts;\n};\n\n\nexports.getRc = getRc;\nfunction getRc(filePath, customOptions) {\n  if (isObject(filePath)) {\n    customOptions = filePath;\n    filePath = null;\n  }\n\n  var cwd = process.cwd();\n\n  customOptions = processExtends(cwd, customOptions);\n\n  // if user sets the \"preset\" we don't load any other config file\n  // we assume the \"preset\" overrides any user settings\n  if (isTopLevel(customOptions)) {\n    return customOptions;\n  }\n\n  // we search for config file starting from source directory or from cwd if\n  // path is not provided\n  var basedir = filePath ? path.dirname(filePath) : cwd;\n  var rc = findAndMergeConfigs(basedir);\n  if (isEmpty(rc) && basedir !== cwd) {\n    rc = findAndMergeConfigs(cwd);\n  }\n  var tmpConfig = !isEmpty(rc) ? rc : getGlobalConfig();\n  return mergeOptions(tmpConfig, customOptions);\n}\n\n\nfunction findAndMergeConfigs(basedir) {\n  if (!basedir || !basedir.length) return;\n\n  var configFiles = ['.esformatter', 'package.json'];\n  var config;\n\n  configFiles.some(function(name) {\n    var filePath = path.join(basedir, name);\n    if (!fs.existsSync(filePath)) return;\n\n    var cur = loadAndParseConfig(filePath);\n    if (name === 'package.json') {\n      cur = processExtends(basedir, cur.esformatter);\n    }\n\n    if (!cur) return;\n\n    // we merge configs on same folder as well just in case user have\n    // \".esformatter\" and \"package.json\" on same folder\n    // notice that \".esformatter\" file takes precedence and will override the\n    // \"package.json\" settings.\n    config = config ? mergeOptions(cur, config) : cur;\n\n    // stop the loop\n    if (isTopLevel(config)) return true;\n  });\n\n  if (isTopLevel(config)) {\n    return config;\n  }\n\n  // we merge configs from parent folders so it's easier to add different rules\n  // for each folder on a project and/or override just specific settings\n  var parentDir = path.resolve(basedir, '..');\n  // we need to check if parentDir is different from basedir to avoid conflicts\n  // on windows (see #174)\n  var parentConfig = parentDir && parentDir !== basedir ?\n    findAndMergeConfigs(parentDir) :\n    {};\n  // notice that current folder config overrides the parent folder config\n  return mergeOptions(parentConfig, config);\n}\n\n\nfunction isTopLevel(config) {\n  // if config contains 'root:true' or inherit from another \"preset\" we\n  // consider it as top-level and don't merge the settings with config files on\n  // parent folders.\n  return config && (config.root || config.preset);\n}\n\n\nfunction getGlobalConfig() {\n  if (!userHome) {\n    return {};\n  }\n  var file = path.join(userHome, '.esformatter');\n  return fs.existsSync(file) ? loadAndParseConfig(file) : {};\n}\n\n\nexports.loadAndParseConfig = loadAndParseConfig;\nfunction loadAndParseConfig(file) {\n  try {\n    var config = JSON.parse(\n      stripJsonComments(fs.readFileSync(file).toString())\n    );\n\n    return processExtends(path.dirname(file), config);\n  } catch (e) {\n    // include file name and let user know error was caused by config file\n    // parsing. this is redundant for ENOENT errors but very helpful for\n    // JSON.parse\n    throw new Error(\n      \"Can't parse configuration file '\" + file + \"'. Exception: \" + e.message\n    );\n  }\n}\n\nfunction processExtends(basePath, config) {\n  if (config && config.extends) {\n    // the last item in the array will override other settings\n    var extended = toArray(config.extends).reduceRight(function(temp, pathOrObject) {\n      var extended;\n      if (isObject(pathOrObject)) {\n        extended = pathOrObject;\n      } else if (_presetReg.test(pathOrObject)) {\n        // load the preset relative to the cwd, that way global esformatter\n        // install will still be able to load the proper preset\n        var moduleId = pathOrObject.replace(_presetReg, 'esformatter-preset-');\n        var resolved = resolve(moduleId, {\n          basedir: path.join(process.cwd(), basePath)\n        });\n        extended = require(resolved);\n      } else {\n        extended = loadAndParseConfig(path.join(basePath, pathOrObject));\n      }\n      invariantNestedExtends(pathOrObject, extended);\n      return mergeOptions(temp, processExtends(basePath, extended));\n    }, {});\n    config = mergeOptions(extended, config);\n  }\n\n  return config;\n}\n\nfunction invariantNestedExtends(pathOrObject, config) {\n  if (typeof pathOrObject === 'string' && !_presetReg.test(pathOrObject)) {\n    return;\n  }\n  // bail early since we can't easily figure out the basePath for nested presets\n  // loaded from node_modules (better error message)\n  toArray(config.extends).some(function(ext) {\n    if (typeof ext === 'string') {\n      throw new Error(\n        'strings are not supported for [extends] inside presets; ' +\n        'please `require()` the preset directly instead of \"' + ext + '\"'\n      );\n    }\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/indent.js":"\"use strict\";\n\nvar rocambole = require('rocambole');\nvar indent = require('rocambole-indent');\nvar debug = require('debug')('esformatter:indent');\nvar hooks = require('./hooks');\n\n// ---\n\n\nvar _opts;\n\n// this hash table is used to map special node types (used only for\n// indentation) into the real hooks\nvar _specialTypes = {\n  'VariableDeclaration': [\n    'SingleVariableDeclaration',\n    'MultipleVariableDeclaration'\n  ]\n};\n\n\n// ---\n\n\nexports.setOptions = setOptions;\nfunction setOptions(opts) {\n  _opts = opts;\n  indent.setOptions(opts);\n}\n\n\n// transform AST in place\nexports.transform = transform;\nfunction transform(ast) {\n  rocambole.walk(ast, transformNode);\n  indent.sanitize(ast);\n  // on v0.6.0 we named the property starting with uppercase \"A\" by mistake, so\n  // now we need to support both styles to keep consistency :(\n  if (_opts.alignComments) {\n    indent.alignComments(ast);\n  }\n  return ast;\n}\n\n\nfunction transformNode(node) {\n  var indentLevel = getIndentLevel(node);\n  if (indentLevel) {\n    var type = node.type;\n    var edges;\n\n    if (type in hooks && hooks[type].getIndentEdges) {\n      edges = hooks[type].getIndentEdges(node, _opts);\n      // for some nodes we might decide that they should not be indented\n      // (complex rules based on context)\n      if (!edges) {\n        debug('[transformNode]: hook returned no edges');\n        return;\n      }\n    } else {\n      edges = node;\n    }\n\n    debug(\n      '[transformNode] type: %s, edges: \"%s\", \"%s\"',\n      node.type,\n      edges && edges.startToken && edges.startToken.value,\n      edges && edges.endToken && edges.endToken.value\n    );\n\n    // some complex nodes like IfStatement contains multiple sub-parts that\n    // should be indented, so we allow an Array of edges as well\n    if (Array.isArray(edges)) {\n      edges.forEach(function(edge) {\n        if (!edge) {\n          // to simplify the logic we allow empty/falsy values on the edges\n          // array, that way we can use same logic for single/multiple edges\n          return;\n        }\n        indentEdge(edge, indentLevel);\n      });\n    } else {\n      indentEdge(edges, indentLevel);\n    }\n  }\n}\n\n\nfunction indentEdge(edge, level) {\n  indent.inBetween(edge.startToken, edge.endToken, edge.level || level);\n}\n\n\nfunction getIndentLevel(node) {\n  var value = _opts[node.type];\n  debug('[getIndentLevel] type: %s, value: %s', node.type, value);\n  if (value == null && node.type in _specialTypes) {\n    var specials = _specialTypes[node.type];\n    specials.some(function(type) {\n      value = _opts[type];\n      return value > 0;\n    });\n    debug('[specialNodeType] indent: %s', value);\n  }\n  return value;\n}\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks.js":"\"use strict\";\n\n\n// Hooks for each node.type that should be processed individually\n// ---\n// using an object to store each transform method to avoid a long switch\n// statement, will be more organized in the long run and also allow\n// monkey-patching/spies/mock/stub.\n\n\n// we are not using something like https://npmjs.org/package/require-all\n// because we want esformatter to be able to run in the browser in the future\n\nexports.ArrayExpression = require('./hooks/ArrayExpression');\nexports.ArrayPattern = require('./hooks/ArrayPattern');\nexports.ArrowFunctionExpression = require('./hooks/ArrowFunctionExpression');\nexports.AssignmentExpression = require('./hooks/AssignmentExpression');\nexports.BinaryExpression = require('./hooks/BinaryExpression');\nexports.BlockStatement = require('./hooks/BlockStatement');\nexports.CallExpression = exports.NewExpression = require('./hooks/CallExpression');\nexports.CatchClause = require('./hooks/CatchClause');\nexports.ClassDeclaration = exports.ClassExpression = require('./hooks/ClassDeclarationAndExpression');\nexports.ConditionalExpression = require('./hooks/ConditionalExpression');\nexports.DoWhileStatement = require('./hooks/DoWhileStatement');\nexports.ExportAllDeclaration = require('./hooks/ExportAllDeclaration');\nexports.ExportDefaultDeclaration = require('./hooks/ExportDefaultDeclaration');\nexports.ExportNamedDeclaration = require('./hooks/ExportNamedDeclaration');\nexports.ExportSpecifier = require('./hooks/ExportSpecifier');\nexports.ForInStatement = require('./hooks/ForInStatement');\nexports.ForOfStatement = require('./hooks/ForOfStatement');\nexports.ForStatement = require('./hooks/ForStatement');\nexports.FunctionDeclaration = require('./hooks/FunctionDeclaration');\nexports.FunctionExpression = require('./hooks/FunctionExpression');\nexports.IfStatement = require('./hooks/IfStatement');\nexports.ImportDeclaration = require('./hooks/ImportDeclaration');\nexports.ImportSpecifier = require('./hooks/ImportSpecifier');\nexports.LogicalExpression = require('./hooks/LogicalExpression');\nexports.MemberExpression = require('./hooks/MemberExpression');\nexports.MethodDefinition = require('./hooks/MethodDefinition');\nexports.ObjectExpression = require('./hooks/ObjectExpression');\nexports.ObjectPattern = require('./hooks/ObjectPattern');\nexports.ReturnStatement = require('./hooks/ReturnStatement');\nexports.SequenceExpression = require('./hooks/SequenceExpression');\nexports.SwitchStatement = require('./hooks/SwitchStatement');\nexports.SwitchCase = require('./hooks/SwitchCase');\nexports.ThrowStatement = require('./hooks/ThrowStatement');\nexports.TryStatement = require('./hooks/TryStatement');\nexports.UnaryExpression = require('./hooks/UnaryExpression');\nexports.UpdateExpression = require('./hooks/UpdateExpression');\nexports.VariableDeclaration = require('./hooks/VariableDeclaration');\nexports.WhileStatement = require('./hooks/WhileStatement');\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/ArrayExpression.js":"\"use strict\";\n\nvar _tk = require('rocambole-token');\nvar _limit = require('../limit');\n\n\nexports.format = function ArrayExpression(node) {\n  if (node.elements.length) {\n    _limit.around(node.startToken, 'ArrayExpressionOpening');\n    _limit.around(node.endToken, 'ArrayExpressionClosing');\n\n    node.elements.forEach(function(el) {\n      // sparse arrays have `null` elements\n      if (!el) return;\n\n      var prev = _tk.findPrevNonEmpty(el.startToken);\n      if (prev.value === ',') {\n        _limit.around(prev, 'ArrayExpressionComma');\n      }\n    });\n  } else {\n    // empty array should be single line\n    _limit.after(node.startToken, 0);\n  }\n};\n\n\nexports.getIndentEdges = function(node) {\n  var start;\n  var prev = node.startToken;\n\n  // this will grab the start of first element that is on a new line\n  node.elements.some(function(el, i, els) {\n    // sparse arrays have `null` elements! which is very weird\n    if (i) {\n      var prevEl = els[i - 1];\n      prev = prevEl ? prevEl.endToken : _tk.findNextNonEmpty(prev);\n    }\n    var next = el ? el.startToken : _tk.findNextNonEmpty(prev);\n\n    if (_tk.findInBetween(prev, next, _tk.isBr)) {\n      start = prev;\n      return true;\n    }\n  });\n\n  var end = node.endToken.prev;\n\n  // if it ends on same line as previous non-empty we need to change the indent\n  // rule to make sure {}, [] and () are aligned\n  var sibling = _tk.findPrevNonEmpty(node.endToken);\n  if (!_tk.findInBetween(sibling, node.endToken, _tk.isBr)) {\n    end = node.endToken;\n  }\n\n  return start ? {\n    startToken: start,\n    endToken: end\n  } : false;\n};\n\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/limit.js":"'use strict';\n\n// limit amount of consecutive white spaces and line breaks adjacent to a given\n// token.\n\nvar _br = require('rocambole-linebreak');\nvar _ws = require('rocambole-whitespace');\n\nexports.before = limitBefore;\nfunction limitBefore(token, typeOrValue) {\n  _br.limitBefore(token, typeOrValue);\n  _ws.limitBefore(token, typeOrValue);\n}\n\n\nexports.after = limitAfter;\nfunction limitAfter(token, typeOrValue) {\n  _br.limitAfter(token, typeOrValue);\n  _ws.limitAfter(token, typeOrValue);\n}\n\n\nexports.around = limitAround;\nfunction limitAround(token, typeOrValue) {\n  _br.limit(token, typeOrValue);\n  _ws.limit(token, typeOrValue);\n}\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/ArrayPattern.js":"'use strict';\n\nvar limit = require('../limit');\nvar tk = require('rocambole-token');\n\nexports.format = function ArrayPattern(node) {\n  limit.around(node.startToken, 'ArrayPatternOpening');\n  limit.around(node.endToken, 'ArrayPatternClosing');\n\n  // array pattern might be like `[a,,b]`, so second element is actually `null`\n  // that's why we can't blindly use the el.endToken so we store `searchStart`\n  var searchStart = node.startToken;\n  node.elements.forEach(function(el) {\n    searchStart = tk.findNext(\n      el ? el.endToken : searchStart,\n      [',', ']']\n    );\n    if (searchStart.value === ',') {\n      limit.around(searchStart, 'ArrayPatternComma');\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/ArrowFunctionExpression.js":"'use strict';\n\nvar tk = require('rocambole-token');\nvar limit = require('../limit');\nvar _params = require('./Params');\n\nexports.format = function ArrowFunctionExpression(node) {\n  var body = node.body;\n  if (body.type === 'BlockStatement') {\n    limit.around(body.startToken, 'ArrowFunctionExpressionOpeningBrace');\n    limit.around(body.endToken, 'ArrowFunctionExpressionClosingBrace');\n  }\n\n  var arrow = tk.findPrev(body.startToken, '=>');\n  limit.around(arrow, 'ArrowFunctionExpressionArrow');\n\n  // make sure we handle `(x) => x` and `x => x`\n  if (shouldHandleParams(node)) {\n    _params.format(node);\n  }\n};\n\nexports.getIndentEdges = function(node, opts) {\n  var edges = [];\n  if (shouldIndentBody(node, opts)) {\n    var arrow = tk.findPrev(node.body.startToken, '=>');\n    edges.push({\n      startToken: arrow,\n      endToken: node.endToken\n    });\n  }\n  if (shouldHandleParams(node)) {\n    edges.push(_params.getIndentEdges(node, opts));\n  }\n  return edges;\n};\n\nfunction shouldHandleParams(node) {\n  var arrow = tk.findPrev(node.body.startToken, '=>');\n  // we don't check based on `node.params` because of `node.defaults`\n  return tk.findPrevNonEmpty(arrow).value === ')';\n}\n\nfunction shouldIndentBody(node, opts) {\n  // we don't want to indent the body twice if ObjectExpression or\n  // ArrayExpression or CallExpression\n  return node.body.type === 'BlockStatement' || !opts[node.body.type];\n}\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/Params.js":"\"use strict\";\n\n// Important: Params is a \"virtual\" node type, not part of the AST spec.\n// this hook is actually called by FunctionDeclaration and FunctionExpression\n// hooks. It's mainly a way to share the common logic between both hooks.\n\nvar _ws = require('rocambole-whitespace');\nvar _tk = require('rocambole-token');\nvar _limit = require('../limit');\n\n\nexports.format = function Params(node) {\n  var params = node.params;\n  var opening = node.startToken.value === '(' ?\n    node.startToken :\n    _tk.findNext(node.startToken, '(');\n  var closing = _tk.findPrev(node.body.startToken, ')');\n\n  if (params.length) {\n    _ws.limitBefore(_tk.findNextNonEmpty(opening), 'ParameterList');\n    params.forEach(function(param, i) {\n      if (i) {\n        // safer to find based on startToken, because of Flow types\n        var prev = _tk.findPrevNonEmpty(param.startToken);\n        if (prev.value === ',') {\n          _limit.around(prev, 'ParameterComma');\n        }\n      }\n\n      // Default parameters are AssignmentExpressions as params\n      if (param.type === 'AssignmentPattern' && param.right) {\n        _limit.around(_tk.findPrev(param.right.startToken, '='), 'AssignmentPattern');\n      }\n    });\n    _ws.limitAfter(_tk.findPrevNonEmpty(closing), 'ParameterList');\n  } else {\n    _limit.after(opening, 0);\n  }\n};\n\nexports.getIndentEdges = function(node, opts) {\n  var params = node.params;\n  if (params.length && opts.ParameterList) {\n    // get/set on ObjectEpression affect drastically the FunctionExpression\n    // structure so we need to handle it differently\n    var start = node.parent.type === 'Property' ?\n      node.parent.startToken :\n      node.startToken;\n    return {\n      // we check if start is equal to \"(\" because of arrow functions\n      startToken: start.value === '(' ? start : _tk.findNext(start, '('),\n      endToken: _tk.findPrev(node.body.startToken, ')'),\n      level: opts.ParameterList\n    };\n  }\n  return null;\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/AssignmentExpression.js":"\"use strict\";\n\nvar _tk = require('rocambole-token');\nvar _ws = require('rocambole-whitespace');\nvar _br = require('rocambole-linebreak');\nvar helpers = require('../helpers');\n\n\nexports.format = function AssignmentExpression(node) {\n  // can't use node.right.startToken since it might be surrounded by\n  // a parenthesis (see #5)\n  var operator = _tk.findNext(node.left.endToken, node.operator);\n  _br.limit(operator, 'AssignmentOperator');\n  _ws.limit(operator, 'AssignmentOperator');\n};\n\n\nexports.getIndentEdges = function(node, opts) {\n  var operator = _tk.findNext(node.left.endToken, node.operator);\n  if (_tk.findInBetween(operator, node.right.startToken, _tk.isBr) ||\n    (helpers.shouldIndentChild(node, node.right, opts) &&\n    _tk.findInBetween(operator, node.right.endToken, _tk.isBr))) {\n    // we only indent if assignment is on next line\n    return {\n      level: opts['AssignmentExpression.' + node.right.type],\n      startToken: operator,\n      endToken: node.endToken.type !== 'Punctuator' ?\n        node.endToken.next : node.endToken\n    };\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/helpers.js":"\"use strict\";\n\nexports.shouldIndentChild = shouldIndentChild;\nfunction shouldIndentChild(parent, child, opts) {\n  // this will avoid indenting objects/arrays/functions twice if they\n  // are on the right of a BinaryExpression, LogicalExpression or\n  // UnaryExpression\n  if (!child || !opts[parent.type + '.' + child.type]) {\n    return false;\n  }\n\n  return !child.right || !opts[child.right.type];\n}\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/BinaryExpression.js":"\"use strict\";\n\nvar _tk = require('rocambole-token');\nvar _ws = require('rocambole-whitespace');\n\n\nexports.format = function BinaryExpression(node) {\n  var operator = _tk.findNext(node.left.endToken, node.operator);\n  _ws.limit(operator, 'BinaryExpressionOperator');\n};\n\nexports.getIndentEdges = function(node) {\n  // we only add indent for the top most BinaryExpression (in case we have\n  // multiple operations in a row)\n  if (node.parent.type === 'BinaryExpression') {\n    return;\n  }\n\n  return {\n    startToken: node.startToken.next,\n    endToken: node.endToken.next || node.endToken\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/BlockStatement.js":"\"use strict\";\n\nvar _limit = require('../limit');\n\nexports.format = function BlockStatement(node) {\n  if (!shouldHandle(node)) {\n    return;\n  }\n\n  _limit.around(node.startToken, 'BlockStatementOpeningBrace');\n  _limit.around(node.endToken, 'BlockStatementClosingBrace');\n};\n\nfunction shouldHandle(node) {\n  // BlockStatement is very generic and used in a bunch of different cases\n  // (function/do/while/arrowFunction/for/forOf/...) so we only handle a few\n  // cases here and let the other hooks take care of everything else\n  return node.parent.type === 'Program' ||\n    node.parent.type === 'BlockStatement';\n}\n\nexports.getIndentEdges = function(node) {\n  if (!shouldHandle(node)) {\n    return false;\n  }\n  return node;\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/CallExpression.js":"\"use strict\";\n\nvar _tk = require('rocambole-token');\nvar _br = require('rocambole-linebreak');\nvar _ws = require('rocambole-whitespace');\nvar _limit = require('../limit');\nvar _parens = require('./expressionParentheses');\n\n\nexports.format = function CallExpression(node) {\n  // parentheses that surrounds the arguments eg. `foo()` and `new Foo(1, 2)`\n  var openingParentheses = getOpeningParentheses(node);\n  var closingParentheses = node.endToken;\n  var hasParentheses = openingParentheses && closingParentheses.value === ')';\n\n  // NewExpression is almost the same as CallExpression, simpler to keep it here\n  if (node.type === 'NewExpression') {\n    _br.limitAfter(node.startToken, 0);\n    _ws.limitAfter(node.startToken, 1);\n  }\n\n  if (hasParentheses) {\n    _limit.around(openingParentheses, 'CallExpressionOpeningParentheses');\n    _limit.around(closingParentheses, 'CallExpressionClosingParentheses');\n  }\n\n  // this is for cases like `new (Foo || Bar)()` and `(lorem || ipsum)()`\n  var calleeParens = _parens.getParentheses(node.callee);\n\n  if (calleeParens) {\n    _limit.after(calleeParens.opening, 'CalleeOpeningParentheses');\n    _limit.before(calleeParens.closing, 'CalleeClosingParentheses');\n  }\n\n  var args = node['arguments'];\n\n  if (args.length) {\n    _limit.before(_tk.findNextNonEmpty(openingParentheses), 'ArgumentList');\n\n    args.forEach(function(arg) {\n      var next = _tk.findInBetween(arg.endToken, closingParentheses, ',');\n      if (next && next.value === ',') {\n        _limit.around(next, 'ArgumentComma');\n      }\n    });\n\n    _limit.after(_tk.findPrevNonEmpty(closingParentheses), 'ArgumentList');\n\n  } else if (hasParentheses) {\n    _limit.after(openingParentheses, 0);\n    _limit.before(closingParentheses, 0);\n  }\n\n  // iife\n  if (node.callee.type !== 'FunctionExpression') {\n    return;\n  }\n\n  var parens = _parens.getParentheses({\n    type: 'Special',\n    startToken: node.startToken,\n    endToken: node.endToken\n  });\n\n  if (parens) {\n    _limit.after(parens.opening, 'IIFEOpeningParentheses');\n    _limit.before(parens.closing, 'IIFEClosingParentheses');\n  }\n\n};\n\nfunction getOpeningParentheses(node) {\n  return _tk.findInBetween(node.callee.endToken, node.endToken, '(');\n}\n\nexports.getIndentEdges = function(node, opts) {\n  // indent in between \"new\" and \"ConstructorName\"\n  var edges = [{\n    startToken: node.startToken,\n    endToken: node.callee.startToken.next\n  }];\n\n  var openingParentheses = getOpeningParentheses(node);\n  if (!openingParentheses || openingParentheses.value !== '(') {\n    return edges;\n  }\n\n  if (!node.arguments.length) {\n    // it might contain comments inside even tho there are no args\n    edges.push({\n      startToken: openingParentheses,\n      endToken: node.endToken\n    });\n    return edges;\n  }\n\n  var start;\n\n  function hasBr(start, end) {\n    return _tk.findInBetween(start, end, _tk.isBr);\n  }\n\n  // indent start based on first argument that starts on a new line\n  node.arguments.some(function(arg, i, args) {\n    var prev = i ? args[i - 1].endToken.next : openingParentheses;\n    if (hasBr(prev, arg.startToken)) {\n      start = prev;\n      return true;\n    }\n  });\n\n  if (!start) {\n    // we handle BinaryExpressions here because multiple operations are grouped\n    // inside the same root node, and we need to indent if it breaks lines\n    node.arguments.some(function(arg) {\n      if (opts['CallExpression.' + arg.type] &&\n        hasBr(arg.startToken, arg.endToken)) {\n        start = arg.startToken.next;\n        return true;\n      }\n    });\n  }\n\n  if (start) {\n    edges.push({\n      startToken: start,\n      endToken: node.endToken\n    });\n  }\n  return edges;\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/expressionParentheses.js":"\"use strict\";\n\nvar _tk = require('rocambole-token');\nvar _ws = require('rocambole-whitespace');\nvar debug = require('debug')('esformatter:parentheses');\n\n\nexports.addSpaceInside = addSpaceInsideExpressionParentheses;\nfunction addSpaceInsideExpressionParentheses(node) {\n  var parentheses = getParentheses(node);\n  if (parentheses) {\n    _ws.limitAfter(parentheses.opening, 'ExpressionOpeningParentheses');\n    _ws.limitBefore(parentheses.closing, 'ExpressionClosingParentheses');\n  }\n}\n\n\nexports.getParentheses = getParentheses;\nfunction getParentheses(node) {\n  if (!isValidExpression(node)) {\n    debug('not valid expression: %s', node.type);\n    return;\n  }\n\n  var opening = node.startToken;\n  if (!opening) {\n    debug('no opening: %s', node.type);\n    return;\n  }\n\n  if (/^(?:Binary|Logical)Expression$/.test(node.type) || opening.value !== '(') {\n    opening = _tk.findPrevNonEmpty(opening);\n  }\n\n  if (!opening || opening.value !== '(') {\n    // \"safe\" to assume it is not inside parentheses\n    debug(\n      'opening is not a parentheses; type: %s, opening: \"%s\"',\n      node.type,\n      opening && opening.value\n    );\n    return;\n  }\n\n  var token = opening;\n  var count = 0;\n  var closing;\n\n  while (token) {\n    if (token.value === '(') {\n      count += 1;\n    } else if (token.value === ')') {\n      count -= 1;\n    }\n    if (count === 0) {\n      closing = token;\n      break;\n    }\n    token = token.next;\n  }\n\n  if (!closing) {\n    debug('not inside parentheses', count);\n    return;\n  }\n\n  // make sure \")\" is wrapping expression, for cases like `(foo) => bar()`\n  if (\n    closing !== node.endToken &&\n    _tk.findPrev(closing, _tk.isCode) !== node.endToken &&\n    _tk.findNext(closing, _tk.isCode) !== node.endToken\n  ) {\n    return;\n  }\n\n  debug(\n    'found parentheses; type: %s, opening: \"%s\", closing: \"%s\"',\n    node.type,\n    opening && opening.value,\n    closing && closing.value\n  );\n\n  return {\n    opening: opening,\n    closing: closing\n  };\n}\n\n// Literal when inside BinaryExpression might be surrounded by parenthesis\n// CallExpression and ArrayExpression don't need spaces\nvar needExpressionParenthesesSpaces = {\n  Literal: true,\n  CallExpression: false,\n  FunctionExpression: false,\n  ArrayExpression: false,\n  ObjectExpression: false,\n  JSXEmptyExpression: false,\n  JSXExpressionContainer: false,\n  // Special is used when we need to override default behavior\n  Special: true\n};\n\n\nfunction isValidExpression(node) {\n  var needSpaces = needExpressionParenthesesSpaces[node.type];\n\n  if (needSpaces) {\n    return true;\n  }\n\n  if (needSpaces == null && node.type.indexOf('Expression') !== -1) {\n    if (node.type === 'ExpressionStatement' && node.startToken === node.expression.startToken) {\n      // Callee is already handled by CallExpression\n      return false;\n    }\n    if (node.type === 'ExpressionStatement' &&\n      (node.expression.callee && node.expression.callee.type === 'FunctionExpression')) {\n      // bypass IIFE\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/CatchClause.js":"\"use strict\";\n\nvar _tk = require('rocambole-token');\nvar _limit = require('../limit');\n\n\nexports.format = function CatchClause(node) {\n  _limit.around(node.startToken, 'CatchKeyword');\n\n  _limit.before(node.param.startToken, 'CatchParameterList');\n  _limit.after(node.param.endToken, 'CatchParameterList');\n\n  _limit.around(node.body.startToken, 'CatchOpeningBrace');\n  _limit.around(node.body.endToken, 'CatchClosingBrace');\n\n  // only remove line breaks if there are no comments inside. Ref #169\n  if (!node.body.body.length && !containsCommentsInside(node.body)) {\n    _tk.removeEmptyInBetween(node.body.startToken, node.body.endToken);\n  }\n};\n\n\nfunction containsCommentsInside(node) {\n  return !!_tk.findInBetween(node.startToken, node.endToken, _tk.isComment);\n}\n\nexports.getIndentEdges = function(node) {\n  return node.body;\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/ClassDeclarationAndExpression.js":"'use strict';\n\n// this file handles both ClassDeclaration and ClassExpression\n\nvar br = require('rocambole-linebreak');\nvar tk = require('rocambole-token');\nvar ws = require('rocambole-whitespace');\nvar limit = require('../limit');\n\nexports.format = function ClassDeclarationAndExpression(node) {\n  var classKeyword = node.startToken;\n  br.limit(classKeyword, 'ClassKeyword');\n  ws.limitAfter(classKeyword, 1);\n\n  var opening = node.body.startToken;\n  var extendsKeyword = tk.findInBetween(classKeyword, opening, 'extends');\n  if (extendsKeyword) {\n    br.limit(extendsKeyword, 'ClassExtendsKeyword');\n    ws.limit(extendsKeyword, 1);\n  }\n\n  limit.around(opening, 'ClassOpeningBrace');\n  limit.around(node.body.endToken, 'ClassClosingBrace');\n};\n\nexports.getIndentEdges = function(node) {\n  return node;\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/ConditionalExpression.js":"\"use strict\";\n\nvar _tk = require('rocambole-token');\nvar _ws = require('rocambole-whitespace');\n\n\nexports.format = function ConditionalExpression(node) {\n  // we need to grab the actual punctuators since parenthesis aren't counted\n  // as part of test/consequent/alternate\n  var questionMark = _tk.findNext(node.test.endToken, '?');\n  var colon = _tk.findNext(node.consequent.endToken, ':');\n\n  _ws.limitBefore(questionMark, _ws.expectedAfter('ConditionalExpressionTest'));\n  _ws.limitAfter(questionMark, _ws.expectedBefore('ConditionalExpressionConsequent'));\n  _ws.limitBefore(colon, _ws.expectedAfter('ConditionalExpressionConsequent'));\n  _ws.limitAfter(colon, _ws.expectedBefore('ConditionalExpressionAlternate'));\n};\n\n\nexports.getIndentEdges = function(node) {\n  if (_tk.findInBetween(node.test.endToken, node.consequent.startToken, _tk.isBr)) {\n    return {\n      startToken: node.test.endToken.next,\n      endToken: node.endToken.next\n    };\n  }\n  if (_tk.findInBetween(node.consequent.endToken, node.alternate.startToken, _tk.isBr)) {\n    return {\n      startToken: node.consequent.endToken.next,\n      endToken: node.endToken.next\n    };\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/DoWhileStatement.js":"'use strict';\n\nvar _tk = require('rocambole-token');\nvar _limit = require('../limit');\nvar _ws = require('rocambole-whitespace');\n\n\nexports.format = function DoWhileStatement(node) {\n  if (node.body.type === 'BlockStatement') {\n    _limit.around(node.body.startToken, 'DoWhileStatementOpeningBrace');\n    _limit.around(node.body.endToken, 'DoWhileStatementClosingBrace');\n  } else {\n    _ws.limitAfter(node.startToken, 1);\n  }\n  var whileKeyword = _tk.findPrev(node.test.startToken, 'while');\n  _ws.limit(whileKeyword, 1);\n};\n\n\nexports.getIndentEdges = function(node) {\n  var edges = [\n    { // do\n      startToken: node.startToken.next,\n      endToken: node.body.endToken\n    },\n    { // while\n      startToken: _tk.findNext(node.body.endToken, '('),\n      endToken: node.endToken.value === ')' ? node.endToken : _tk.findPrev(node.endToken, ')')\n    }\n  ];\n\n  return edges;\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/ExportAllDeclaration.js":"'use strict';\n\nvar _br = require('rocambole-linebreak');\nvar _tk = require('rocambole-token');\nvar _ws = require('rocambole-whitespace');\n\nexports.format = function ExportAllDeclaration(node) {\n  var star = _tk.findNext(node.startToken, '*');\n  _br.limit(star, 0);\n  _ws.limit(star, 1);\n\n  var fromKeyword = _tk.findNext(node.startToken, 'from');\n  _br.limit(fromKeyword, 0);\n  _ws.limit(fromKeyword, 1);\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/ExportDefaultDeclaration.js":"'use strict';\n\nvar _br = require('rocambole-linebreak');\nvar _tk = require('rocambole-token');\nvar _ws = require('rocambole-whitespace');\n\nexports.format = function ExportDefaultDeclaration(node) {\n  var def = _tk.findNext(node.startToken, 'default');\n  _br.limit(def, 0);\n  _ws.limit(def, 1);\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/ExportNamedDeclaration.js":"'use strict';\n\nvar _br = require('rocambole-linebreak');\nvar _tk = require('rocambole-token');\nvar _ws = require('rocambole-whitespace');\n\nvar ImportDeclaration = require('./ImportDeclaration');\n\nexports.format = function ExportNamedDeclaration(node) {\n  _br.limitAfter(node.startToken, 0);\n  _ws.limitAfter(node.startToken, 1);\n\n  // node.specifiers is actually handled by the ExportSpecifier hook!\n\n  if (!node.specifiers.length) return;\n\n  var fromKeyword = _tk.findPrev(node.endToken, 'from');\n  if (fromKeyword) {\n    // safeguard against `export { foo, bar };` (no \"from\")\n    _br.limit(fromKeyword, 0);\n    _ws.limit(fromKeyword, 1);\n  }\n};\n\nexports.getIndentEdges = ImportDeclaration.getIndentEdges;\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/ImportDeclaration.js":"'use strict';\n\nvar _br = require('rocambole-linebreak');\nvar _tk = require('rocambole-token');\nvar _ws = require('rocambole-whitespace');\n\nexports.format = function ImportDeclaration(node) {\n  _br.limitAfter(node.startToken, 0);\n  _ws.limitAfter(node.startToken, 1);\n\n  // node.specifiers is actually handled by the ImportSpecifier hook!\n\n  if (!node.specifiers.length) return;\n\n  var fromKeyword = _tk.findPrev(node.endToken, 'from');\n  _br.limit(fromKeyword, 0);\n  _ws.limit(fromKeyword, 1);\n};\n\nexports.getIndentEdges = function(node) {\n  // IMPORTANT: getIndentEdges logic is reused by ExportNamedDeclaration\n  var braceStart;\n  node.specifiers.some(function(spec) {\n    var prev = _tk.findPrev(spec.startToken, _tk.isCode);\n    if (prev.value === '{') {\n      braceStart = prev;\n      return true;\n    }\n  });\n  if (!braceStart) {\n    return;\n  }\n\n  return {\n    startToken: braceStart,\n    endToken: _tk.findNext(node.specifiers[node.specifiers.length - 1].endToken, '}')\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/ExportSpecifier.js":"'use strict';\n\nmodule.exports = require('./ImportSpecifier');\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/ImportSpecifier.js":"'use strict';\n\n// this logic is shared with ExportSpecifier\n\nvar _br = require('rocambole-linebreak');\nvar _tk = require('rocambole-token');\nvar _ws = require('rocambole-whitespace');\nvar limit = require('../limit');\n\nexports.format = function(node) {\n  var braceStart = _tk.findPrev(node.startToken, _tk.isCode);\n  var braceEnd = _tk.findNext(node.endToken, _tk.isCode);\n\n  // handle `import foo, { lorem, ipsum } from 'lib';`\n  if (braceStart.value === '{') {\n    limit.around(braceStart, 'ModuleSpecifierOpeningBrace');\n  } else if (braceStart.value === ',') {\n    limit.around(braceStart, 'ModuleSpecifierComma');\n  }\n\n  if (braceEnd.value === ',') {\n    limit.around(braceEnd, 'ModuleSpecifierComma');\n  } else if (braceEnd.value === '}') {\n    limit.before(braceEnd, 'ModuleSpecifierClosingBrace');\n\n    var next = _tk.findNextNonEmpty(braceEnd);\n    if (next && next.value === ';') {\n      // handle `export {foo, bar};`\n      _br.limitAfter(braceEnd, 0);\n    } else if (node.parent.endToken !== braceEnd) {\n      // we don't want to limit line break for lines that contains just\n      // `export {foo, bar}` because that would remove undesired line breaks\n      limit.after(braceEnd, 'ModuleSpecifierClosingBrace');\n    }\n  }\n\n  if (node.startToken.value !== node.endToken.value) {\n    // handle spaces around \"as\"\n    // eg: `import { named1 as myNamed1 } from 'lib'`\n    // eg: `import * as myLib from 'lib'`\n    _br.limitAfter(node.startToken, 0);\n    _br.limitBefore(node.endToken, 0);\n    _ws.limitAfter(node.startToken, 1);\n    _ws.limitBefore(node.endToken, 1);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/ForInStatement.js":"\"use strict\";\n\nvar _br = require('rocambole-linebreak');\nvar _tk = require('rocambole-token');\nvar _ws = require('rocambole-whitespace');\n\n\nexports.format = function ForInStatement(node) {\n  var expressionStart = _tk.findNext(node.startToken, '(');\n  var expressionEnd = _tk.findPrev(node.body.startToken, ')');\n\n  _br.limit(expressionStart, 'ForInStatementExpressionOpening');\n  _ws.limit(expressionStart, 'ForInStatementExpressionOpening');\n\n  _br.limit(expressionEnd, 'ForInStatementExpressionClosing');\n  _ws.limit(expressionEnd, 'ForInStatementExpressionClosing');\n\n  if (node.body.type === 'BlockStatement' && node.body.body.length) {\n    var bodyStart = node.body.startToken;\n    var bodyEnd = node.body.endToken;\n\n    _br.limit(bodyStart, 'ForInStatementOpeningBrace');\n    _ws.limit(bodyStart, 'ForInStatementOpeningBrace');\n\n    _br.limit(bodyEnd, 'ForInStatementClosingBrace');\n    _ws.limit(bodyEnd, 'ForInStatementClosingBrace');\n\n    _ws.limitAfter(expressionEnd, 'ForInStatementExpression');\n  }\n\n  _ws.limitAfter(node.left.endToken, 1);\n  _ws.limitBefore(node.right.startToken, 1);\n};\n\n\nexports.getIndentEdges = function(node) {\n  var edges = [];\n\n  edges.push({\n    startToken: node.left.startToken,\n    endToken: node.right.endToken\n  });\n\n  if (node.body.type === 'BlockStatement') {\n    edges.push(node.body);\n  } else {\n    edges.push({\n      startToken: _tk.findNext(node.right.endToken, ')').next,\n      endToken: node.endToken\n    });\n  }\n\n  return edges;\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/ForOfStatement.js":"\"use strict\";\n\nvar _br = require('rocambole-linebreak');\nvar _tk = require('rocambole-token');\nvar _ws = require('rocambole-whitespace');\n\n\nexports.format = function ForOfStatement(node) {\n  var expressionStart = _tk.findNext(node.startToken, '(');\n  var expressionEnd = _tk.findPrev(node.body.startToken, ')');\n\n  _br.limit(expressionStart, 'ForOfStatementExpressionOpening');\n  _ws.limit(expressionStart, 'ForOfStatementExpressionOpening');\n\n  _br.limit(expressionEnd, 'ForOfStatementExpressionClosing');\n  _ws.limit(expressionEnd, 'ForOfStatementExpressionClosing');\n\n  if (node.body.type === 'BlockStatement' && node.body.body.length) {\n    var bodyStart = node.body.startToken;\n    var bodyEnd = node.body.endToken;\n\n    _br.limit(bodyStart, 'ForOfStatementOpeningBrace');\n    _ws.limit(bodyStart, 'ForOfStatementOpeningBrace');\n\n    _br.limit(bodyEnd, 'ForOfStatementClosingBrace');\n    _ws.limit(bodyEnd, 'ForOfStatementClosingBrace');\n\n    _ws.limitAfter(expressionEnd, 'ForOfStatementExpression');\n  }\n\n  _ws.limitAfter(node.left.endToken, 1);\n  _ws.limitBefore(node.right.startToken, 1);\n};\n\n\nexports.getIndentEdges = function(node) {\n  var edges = [];\n\n  edges.push({\n    startToken: node.left.startToken,\n    endToken: node.right.endToken\n  });\n\n  if (node.body.type === 'BlockStatement') {\n    edges.push(node.body);\n  } else {\n    edges.push({\n      startToken: _tk.findNext(node.right.endToken, ')').next,\n      endToken: node.endToken\n    });\n  }\n\n  return edges;\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/ForStatement.js":"\"use strict\";\n\nvar _tk = require('rocambole-token');\nvar _ws = require('rocambole-whitespace');\nvar _limit = require('../limit');\n\n\nexports.format = function ForStatement(node) {\n  var semi_1 = _tk.findNext(node.startToken, ';');\n  var semi_2 = _tk.findPrev(node.body.startToken, ';');\n  _ws.limit(semi_1, 'ForStatementSemicolon');\n  _ws.limit(semi_2, 'ForStatementSemicolon');\n\n  var expressionStart = _tk.findNext(node.startToken, '(');\n  var expressionEnd = _tk.findPrev(node.body.startToken, ')');\n  _limit.around(expressionStart, 'ForStatementExpressionOpening');\n  _limit.around(expressionEnd, 'ForStatementExpressionClosing');\n\n  if (node.body.type === 'BlockStatement') {\n    var bodyStart = node.body.startToken;\n    var bodyEnd = node.body.endToken;\n    _limit.around(bodyStart, 'ForStatementOpeningBrace');\n    _limit.around(bodyEnd, 'ForStatementClosingBrace');\n  }\n};\n\n\nexports.getIndentEdges = function(node) {\n  var edges = [];\n\n  var args = {\n    startToken: _tk.findNext(node.startToken, '('),\n    endToken: _tk.findPrev(node.body.startToken, ')')\n  };\n  edges.push(args);\n\n  if (node.body.type === 'BlockStatement') {\n    edges.push(node.body);\n  } else {\n    edges.push({\n      startToken: args.endToken,\n      endToken: node.endToken\n    });\n  }\n\n  return edges;\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/FunctionDeclaration.js":"\"use strict\";\n\nvar _tk = require('rocambole-token');\nvar _ws = require('rocambole-whitespace');\nvar _limit = require('../limit');\nvar _params = require('./Params');\n\n\nexports.format = function FunctionDeclaration(node) {\n  if (node.id) {\n    _limit.around(node.id.startToken, 'FunctionName');\n  }\n  // babel-eslint reports async functions as generators.\n  //\n  // Make sure the generator function is not an async function before removing\n  // the whitespace.\n  //\n  // This will prevent a function such as `async function fun() {}` being\n  // converted to `asyncfunction fun() {}`.\n  if (node.async) {\n    _ws.limitAfter(node.startToken, 1);\n  } else if (node.generator) {\n    var genToken = _tk.findNextNonEmpty(node.startToken);\n    _ws.limitBefore(genToken, 'FunctionGeneratorAsterisk');\n  }\n  _params.format(node);\n  _limit.around(node.body.startToken, 'FunctionDeclarationOpeningBrace');\n  _limit.around(node.body.endToken, 'FunctionDeclarationClosingBrace');\n};\n\n\nexports.getIndentEdges = function(node, opts) {\n  return [\n    _params.getIndentEdges(node, opts),\n    node.body\n  ];\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/FunctionExpression.js":"\"use strict\";\n\nvar _tk = require('rocambole-token');\nvar _ws = require('rocambole-whitespace');\nvar _params = require('./Params');\nvar _limit = require('../limit');\n\n\nexports.format = function FunctionExpression(node) {\n  _limit.around(node.body.startToken, 'FunctionExpressionOpeningBrace');\n  _limit.around(node.endToken, 'FunctionExpressionClosingBrace');\n\n  var startToken = node.startToken;\n  if (node.id) {\n    _ws.limit(node.id.startToken, 'FunctionName');\n  } else if (startToken.value === 'function') {\n    if (node.generator) {\n      startToken = _tk.findNextNonEmpty(startToken);\n      _ws.limitBefore(startToken, 'FunctionGeneratorAsterisk');\n    }\n\n    _ws.limit(startToken, 'FunctionReservedWord');\n  }\n\n  if (_tk.isWs(node.endToken.next) &&\n    _tk.isSemiColon(node.endToken.next.next)) {\n    _tk.remove(node.endToken.next);\n  }\n\n  if (node.parent.type === 'CallExpression') {\n    _ws.limitAfter(node.endToken, 0);\n  }\n\n  var bodyFirstNonEmpty = _tk.findNextNonEmpty(node.body.startToken);\n  if (bodyFirstNonEmpty.value === '}') {\n    // noop\n    _limit.after(node.body.startToken, 0);\n  }\n\n  _params.format(node);\n};\n\n\nexports.getIndentEdges = function(node, opts) {\n  var params = _params.getIndentEdges(node, opts);\n  // TODO make this a plugin\n  if (!opts.TopLevelFunctionBlock && isTopLevelFunctionBlock(node)) {\n    return params;\n  }\n  return [\n    params,\n    {\n      startToken: node.body.startToken,\n      endToken: _tk.findPrevNonEmpty(node.body.endToken).next\n    }\n  ];\n};\n\n\nfunction isTopLevelFunctionBlock(node) {\n  // exception for UMD blocks\n  return !(node.params.length === 1 && node.params[0].name === \"factory\") &&\n    // regular IFEE\n    (isOfType(node.parent, 'CallExpression') ||\n    // module.exports assignment\n    isOfType(node.parent, 'AssignmentExpression')) &&\n    !isOfType(node.parent.callee, 'MemberExpression') &&\n    isOfType(node.parent.parent, 'ExpressionStatement') &&\n    isOfType(node.parent.parent.parent, 'Program');\n}\n\n\n// TODO: extract into rocambole-node\nfunction isOfType(node, type) {\n  return node && node.type === type;\n}\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/IfStatement.js":"\"use strict\";\n\nvar _br = require('rocambole-linebreak');\nvar _tk = require('rocambole-token');\nvar _ws = require('rocambole-whitespace');\nvar _limit = require('../limit');\n\nexports.format = function IfStatement(node) {\n\n  var conditionalStart = _tk.findPrev(node.test.startToken, '(');\n  var conditionalEnd = _tk.findNext(node.test.endToken, ')');\n\n  _ws.limit(conditionalStart, 'IfStatementConditionalOpening');\n  _ws.limit(conditionalEnd, 'IfStatementConditionalClosing');\n\n  var ifStatIsBlock = node.consequent.type === 'BlockStatement';\n  var alt = node.alternate;\n  if (alt) {\n    var elseKeyword = _tk.findPrev(alt.startToken, 'else');\n\n    if (alt.type === 'IfStatement') {\n      // ElseIfStatement\n\n      // space between \"else if\" (`alt.startToken` is \"if\")\n      _br.limitBefore(alt.startToken, 0);\n      _ws.limitBefore(alt.startToken, 1);\n\n      if (alt.consequent.type === 'BlockStatement') {\n        _br.limitBefore(alt.consequent.startToken, 'ElseIfStatementOpeningBrace');\n        _br.limitBefore(alt.consequent.endToken, 'ElseIfStatementClosingBrace');\n      }\n\n      // only remove line break before \"else\" if previous char is \"}\"; white\n      // space is handled by \"whiteSpace.after.IfStatementClosingBrace\"\n      _br.limitBefore(\n        elseKeyword,\n        ifStatIsBlock ?\n          'ElseIfStatement' :\n          1\n      );\n\n      if (!alt.alternate) {\n        // we only limit the line breaks after the ElseIfStatement if it is not\n        // followed by an ElseStatement, otherwise it would add line breaks\n        // that it shouldn't\n        _br.limitAfter(alt.consequent.endToken, 'ElseIfStatement');\n      }\n\n    } else if (alt.type === 'BlockStatement') {\n      // ElseStatement\n\n      _limit.around(alt.startToken, 'ElseStatementOpeningBrace');\n\n      _br.limitBefore(elseKeyword, ifStatIsBlock ? 'ElseStatement' : 1);\n      _br.limitAfter(alt.endToken, 'ElseStatement');\n\n      _limit.around(alt.endToken, 'ElseStatementClosingBrace');\n    } else {\n      // ElseStatement without curly braces\n      _ws.limitAfter(elseKeyword, 1);\n    }\n  }\n\n  var startBody = node.consequent.startToken;\n  var endBody = node.consequent.endToken;\n\n  if (ifStatIsBlock) {\n    _limit.around(startBody, 'IfStatementOpeningBrace');\n    if (!alt) {\n      _br.limit(endBody, 'IfStatementClosingBrace');\n    } else {\n      _br.limitBefore(endBody, 'IfStatementClosingBrace');\n    }\n    _ws.limit(endBody, 'IfStatementClosingBrace');\n  }\n\n};\n\n\nexports.getIndentEdges = function(node, opts) {\n  var edges = [];\n\n  var test = node.test;\n  var consequent = node.consequent;\n  var alt = node.alternate;\n\n  // test (IfStatementConditional)\n  edges.push({\n    level: opts.IfStatementConditional,\n    startToken: _tk.findNext(node.startToken, '('),\n    endToken: _tk.findPrev(consequent.startToken, ')'),\n  });\n\n  function isExecutable(token) {\n    return _tk.isNotEmpty(token) && !_tk.isComment(token);\n  }\n\n  // consequent (body)\n  edges.push({\n    startToken: (consequent.type === 'BlockStatement' ?\n      consequent.startToken :\n      test.endToken.next\n    ),\n    // we have some special rules for comments just before the `else` statement\n    // because of jQuery style guide. maybe in the future we will add\n    // a setting to toggle this behavior (if someone asks for it)\n    endToken: (alt && _tk.isComment(_tk.findPrevNonEmpty(consequent.endToken)) ?\n      _tk.findPrev(consequent.endToken, isExecutable).next :\n      consequent.endToken\n    )\n  });\n\n  // alt (else)\n  if (alt && alt.type !== 'IfStatement') {\n    // it the alternate is IfStatement it will already take care of indentation\n    edges.push({\n      startToken: (alt.type === 'BlockStatement' ?\n        alt.startToken :\n        _tk.findPrevNonEmpty(alt.startToken).next\n      ),\n      endToken: alt.endToken\n    });\n  }\n\n  return edges;\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/LogicalExpression.js":"\"use strict\";\n\nvar _br = require('rocambole-linebreak');\nvar _tk = require('rocambole-token');\nvar _ws = require('rocambole-whitespace');\n\n\nexports.format = function LogicalExpression(node) {\n  var operator = _tk.findNext(node.left.endToken, node.operator);\n  _ws.limit(operator, 'LogicalExpressionOperator');\n  // revert line breaks since parenthesis might not be part of\n  // node.startToken and node.endToken\n  if (node.parent.type === 'ExpressionStatement') {\n    var prev = _tk.findPrevNonEmpty(node.left.startToken);\n    if (prev && prev.value === '(') {\n      _br.limit(prev, 'ExpressionOpeningParentheses');\n      _ws.limit(prev, 'ExpressionOpeningParentheses');\n      node.startToken = prev;\n    }\n    var next = _tk.findNextNonEmpty(node.right.endToken);\n    if (next && next.value === ')') {\n      _br.limit(next, 'ExpressionClosingParentheses');\n      _ws.limit(next, 'ExpressionClosingParentheses');\n      node.endToken = next;\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/MemberExpression.js":"\"use strict\";\n\nvar _tk = require('rocambole-token');\nvar _limit = require('../limit');\n\n\nexports.format = function MemberExpression(node) {\n  var opening = _tk.findPrevNonEmpty(node.property.startToken),\n    closing = _tk.findNextNonEmpty(node.property.endToken);\n  if (opening && closing && opening.value === '[' && closing.value === ']') {\n    _limit.around(opening, 'MemberExpressionOpening');\n    _limit.around(closing, 'MemberExpressionClosing');\n  }\n  if (opening && opening.value === '.') {\n    _limit.around(opening, 'MemberExpressionPeriod');\n  }\n};\n\n\nexports.getIndentEdges = function(node) {\n  var edge = {};\n  edge.startToken = node.object.endToken;\n\n  if (node.object.type !== 'CallExpression') {\n    edge.startToken = edge.startToken.next;\n  }\n\n  edge.endToken = node.endToken;\n  if (node.parent.type === 'CallExpression' &&\n    node.parent.callee.type === 'MemberExpression') {\n    edge.endToken = node.parent.endToken;\n  }\n\n  // only indent if on a different line\n  if (!_tk.findInBetween(edge.startToken, node.property.startToken, _tk.isBr)) {\n    return false;\n  }\n\n  return edge;\n};\n\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/MethodDefinition.js":"'use strict';\n\nvar br = require('rocambole-linebreak');\nvar limit = require('../limit');\nvar tk = require('rocambole-token');\nvar ws = require('rocambole-whitespace');\n\nexports.format = function MethodDefinition(node) {\n  br.limitAfter(node.startToken, 0);\n  // limit to one space after get/set/static\n  if (node.startToken !== node.key.startToken) {\n    ws.limitAfter(node.startToken, 1);\n  }\n  ws.limitAfter(node.key.endToken, 'MethodDefinitionName');\n\n  // parentheses {}\n  var opening = node.value.body.startToken;\n  limit.around(opening, 'MethodDefinitionOpeningBrace');\n  limit.around(node.endToken, 'MethodDefinitionClosingBrace');\n  var bodyFirstNonEmpty = tk.findNextNonEmpty(opening);\n  if (bodyFirstNonEmpty.value === '}') {\n    // noop\n    limit.after(opening, 0);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/ObjectExpression.js":"\"use strict\";\n\nvar _br = require('rocambole-linebreak');\nvar _tk = require('rocambole-token');\nvar _ws = require('rocambole-whitespace');\nvar _limit = require('../limit');\n\n\nexports.format = function ObjectExpression(node) {\n  if (!node.properties.length) return;\n\n  // TODO: improve this, there are probably more edge cases\n  var shouldBeSingleLine = node.parent.type === 'ForInStatement' || node.parent.type === 'ForOfStatement';\n\n  if (!shouldBeSingleLine) {\n    _limit.around(node.startToken, 'ObjectExpressionOpeningBrace');\n  } else {\n    // XXX: we still have this rule that looks weird, maybe change it in the\n    // future since it is not flexible (edge-case tho)\n    _tk.removeEmptyInBetween(node.startToken, node.endToken);\n  }\n\n  node.properties.forEach(function(prop) {\n    var valueStart = getValueStart(prop);\n    var valueEnd = getValueEnd(prop);\n    var keyStart = getKeyStart(prop);\n    var keyEnd = getKeyEnd(prop);\n\n    // convert comma-first to comma-last\n    var comma = _tk.findNext(valueEnd, [',', '}']);\n    if (_tk.isComma(comma)) {\n      _tk.removeInBetween(valueEnd, comma, _tk.isBr);\n      _tk.remove(comma);\n      _tk.after(valueEnd, comma);\n    }\n\n    if (!shouldBeSingleLine) {\n      _br.limitBefore(keyStart, 'PropertyName');\n      _br.limitAfter(keyEnd, 'PropertyName');\n      if (valueStart) {\n        _br.limitBefore(valueStart, 'PropertyValue');\n        _br.limitAfter(valueEnd, 'PropertyValue');\n      }\n    } else if (keyStart.prev.value !== '{') {\n      _ws.limitBefore(keyStart, 'Property');\n    }\n\n    if (\n      prop.kind === 'get' ||\n      prop.kind === 'set' ||\n      prop.method\n    ) {\n      // `get foo() {}`\n      // `set foo() {}`\n      // `foo() {}`\n      _ws.limitBefore(keyStart, 1);\n      _ws.limitAfter(keyEnd, 'MethodName');\n      return;\n    }\n\n    _ws.limitBefore(keyStart, 'PropertyName');\n    _ws.limitAfter(keyEnd, 'PropertyName');\n    if (valueStart) {\n      _ws.limitBefore(valueStart, 'PropertyValue');\n      _ws.limitAfter(valueEnd, 'PropertyValue');\n    }\n  });\n\n  if (!shouldBeSingleLine) {\n    _limit.around(node.endToken, 'ObjectExpressionClosingBrace');\n  }\n};\n\n\nfunction getKeyStart(prop) {\n  var start = prop.key.startToken;\n  start = _tk.findPrev(start, ['{', ',']);\n  return _tk.findNext(start, _tk.isCode);\n}\n\n\nfunction getKeyEnd(prop) {\n  var end = prop.key.endToken;\n  end = _tk.findNext(end, [':', '(', ',', '}']);\n  return _tk.findPrev(end, _tk.isCode);\n}\n\n\nfunction getValueStart(prop) {\n  if (prop.key.startToken === prop.value.startToken) {\n    // shorthand prop `{foo}`\n    return null;\n  }\n  var start = prop.value.startToken;\n  if (\n    prop.kind === 'get' ||\n    prop.kind === 'set' ||\n    prop.method\n  ) {\n    // `get foo() {}`\n    // `set foo() {}`\n    // `foo() {}`\n    return start;\n  } else {\n    // regular object property `{foo: (bar + 123)}`\n    return _tk.findNext(_tk.findPrev(start, ':'), _tk.isCode);\n  }\n}\n\n\nfunction getValueEnd(prop) {\n  if (prop.key.startToken === prop.value.startToken) {\n    return null;\n  }\n  // we need to grab next \",\" or \"}\" because value might be surrounded by\n  // parenthesis which would break the regular logic\n  var end = _tk.findNext(prop.value.endToken, [',', '}']);\n  return _tk.findPrev(end, _tk.isCode);\n}\n\n\nexports.getIndentEdges = function(node, opts) {\n  var edges = [{\n    startToken: node.startToken,\n    endToken: _tk.findInBetweenFromEnd(node.startToken, node.endToken, _tk.isBr)\n  }];\n\n  node.properties.forEach(function(property) {\n    if (!opts['ObjectExpression.' + property.value.type]) return;\n    edges.push({\n      startToken: getValueStart(property),\n      endToken: getValueEnd(property)\n    });\n  });\n\n  return edges;\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/ObjectPattern.js":"'use strict';\n\nvar limit = require('../limit');\nvar tk = require('rocambole-token');\n\nexports.format = function ObjectPattern(node) {\n  limit.around(node.startToken, 'ObjectPatternOpeningBrace');\n  limit.around(node.endToken, 'ObjectPatternClosingBrace');\n\n  node.properties.forEach(function(prop) {\n    var comma = tk.findNext(prop.endToken, [',', '}']);\n    if (comma.value === ',') {\n      limit.around(comma, 'ObjectPatternComma');\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/ReturnStatement.js":"\"use strict\";\n\nvar _tk = require('rocambole-token');\nvar _ws = require('rocambole-whitespace');\n\nvar expressionParentheses = require('./expressionParentheses');\n\n\nexports.format = function ReturnStatement(node) {\n  // need to make sure we only remove line breaks inside the node itself\n  // because of ASI (see #29)\n  var nonEmpty = _tk.findInBetween(node.startToken.next, node.endToken, _tk.isNotEmpty);\n  // XXX: we want to remove line breaks and white spaces inside the node, not\n  // using _br.limitAfter to avoid changing the program behavior (ASI)\n  if (nonEmpty) _tk.removeEmptyInBetween(node.startToken, nonEmpty);\n\n  _ws.limitAfter(node.startToken, 1);\n  if (_tk.isSemiColon(node.endToken)) {\n    // XXX: we want semicolon to be on same line and no whitespaces for now.\n    _tk.removeEmptyInBetween(_tk.findPrevNonEmpty(node.endToken), node.endToken);\n  }\n\n  if (node.argument) {\n    expressionParentheses.addSpaceInside(node.argument);\n  }\n};\n\n\nexports.getIndentEdges = function(node, opts) {\n  // we bypass indentation if argument already adds indentation\n  if (\n    !node.argument ||\n    opts[node.argument.type] ||\n    node.argument.type === 'UnaryExpression'\n  ) {\n    return false;\n  }\n\n  var parentheses = expressionParentheses.getParentheses(node.argument);\n  return parentheses ?\n    {\n      startToken: parentheses.opening,\n      endToken: parentheses.closing\n    } :\n    {\n      startToken: node.startToken.next,\n      endToken: _tk.isEmpty(node.endToken) ?\n        _tk.findPrevNonEmpty(node.endToken) :\n        node.endToken\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/SequenceExpression.js":"\"use strict\";\n\nvar _ws = require('rocambole-whitespace');\n\n\nexports.format = function SequenceExpression(node) {\n  node.expressions.forEach(function(expr, i) {\n    if (i) {\n      var operator = expr.startToken.prev;\n      while (operator.value !== ',') {\n        operator = operator.prev;\n      }\n      _ws.limit(operator, 'CommaOperator');\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/SwitchStatement.js":"\"use strict\";\n\nvar _tk = require('rocambole-token');\nvar _limit = require('../limit');\n\n\nexports.format = function SwitchStatement(node) {\n  var opening = _tk.findPrev(node.discriminant.startToken, '(');\n  var closing = _tk.findNext(node.discriminant.endToken, ')');\n  var openingBrace = _tk.findNext(closing, '{');\n  var closingBrace = node.endToken;\n\n  _limit.around(openingBrace, 'SwitchOpeningBrace');\n  _limit.around(closingBrace, 'SwitchClosingBrace');\n  _limit.around(opening, 'SwitchDiscriminantOpening');\n  _limit.around(closing, 'SwitchDiscriminantClosing');\n\n  // cases are handled by SwitchCase hook!\n\n};\n\n\nexports.getIndentEdges = function(node) {\n  return {\n    startToken: _tk.findNext(node.discriminant.endToken, '{'),\n    endToken: node.endToken\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/SwitchCase.js":"\"use strict\";\n\nvar _ws = require('rocambole-whitespace');\nvar _br = require('rocambole-linebreak');\nvar _tk = require('rocambole-token');\nvar limit = require('../limit');\n\n\nexports.format = function SwitchCase(node) {\n  if (node.test) {\n    // we want case to always be on the same line!\n    _br.limitBefore(node.test.startToken, 0);\n    _ws.limitBefore(node.test.startToken, 1);\n  }\n  var endToken = node.endToken;\n\n  var colon = _tk.findNext(node.startToken, ':');\n  limit.before(colon, 'SwitchCaseColon');\n  limit.after(colon, 'SwitchCaseColon');\n\n  var consequent = node.consequent[0];\n  if (consequent && consequent.type === 'BlockStatement') {\n    limit.around(consequent.startToken, 'SwitchCaseBlockStart');\n    limit.around(consequent.endToken, 'SwitchCaseBlockEnd');\n  }\n\n  // endToken might be \":\" or \"break\" or \";\"\n  var breakKeyword = _tk.findInBetweenFromEnd(node.startToken, endToken.next, 'break');\n  if (breakKeyword) {\n    limit.before(breakKeyword, 'BreakKeyword');\n    limit.after(endToken, 'BreakKeyword');\n  }\n};\n\n\nexports.getIndentEdges = function(node) {\n  // we need to get the next token because `default` might end with a `}`\n  // (ie. IfStatement) we also need to search for next `case` or `}` or\n  // `break` or `default` to make sure comments are included inside the range\n  var consequent = node.consequent[0];\n  var end = consequent && consequent.type === 'BlockStatement' ?\n    consequent.endToken :\n    _tk.findNext(node.endToken, ['}', 'case', 'break', 'default']);\n  return {\n    startToken: node.startToken,\n    endToken: end.prev\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/ThrowStatement.js":"\"use strict\";\n\nvar _ws = require('rocambole-whitespace');\n\n\nexports.format = function ThrowStatement(node) {\n  _ws.limit(node.startToken, 'ThrowKeyword');\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/TryStatement.js":"\"use strict\";\n\nvar _tk = require('rocambole-token');\nvar _limit = require('../limit');\n\n\nexports.format = function TryStatement(node) {\n  var finalizer = node.finalizer;\n  if (finalizer) {\n    var finallyKeyword = _tk.findPrev(finalizer.startToken, 'finally');\n    _limit.around(finallyKeyword, 'FinallyKeyword');\n    _limit.around(finalizer.startToken, 'FinallyOpeningBrace');\n    _limit.around(finalizer.endToken, 'FinallyClosingBrace');\n\n    if (!finalizer.body.length && !containsCommentsInside(finalizer)) {\n      // XXX: empty body, so we should remove all white spaces\n      _tk.removeEmptyInBetween(finalizer.startToken, finalizer.endToken);\n    }\n  }\n\n  // CatchClause is handled by its own hook\n\n  _limit.around(node.startToken, 'TryKeyword');\n  _limit.around(node.block.startToken, 'TryOpeningBrace');\n  _limit.around(node.block.endToken, 'TryClosingBrace');\n};\n\n\nfunction containsCommentsInside(node) {\n  return !!_tk.findInBetween(node.startToken, node.endToken, _tk.isComment);\n}\n\n\nexports.getIndentEdges = function(node) {\n  var edges = [node.block];\n\n  if (node.finalizer) {\n    edges.push(node.finalizer);\n  }\n\n  // CatchClause is handled by it's own node (automatically)\n\n  return edges;\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/UnaryExpression.js":"\"use strict\";\n\nvar _br = require('rocambole-linebreak');\nvar _tk = require('rocambole-token');\nvar _ws = require('rocambole-whitespace');\n\n\nexports.format = function UnaryExpression(node) {\n  if (node.operator === 'delete') {\n    _ws.limitAfter(node.startToken, 1);\n    _br.limitBefore(node.startToken, 'DeleteOperator');\n\n    var endToken = node.endToken;\n    if (_tk.isWs(endToken.next)) {\n      _ws.limitAfter(endToken, 0);\n    }\n    if (_tk.isSemiColon(endToken.next)) {\n      endToken = endToken.next;\n    }\n    _br.limitAfter(endToken, 'DeleteOperator');\n  } else if (node.operator === 'typeof' || node.operator === 'void') {\n    _ws.limitAfter(node.startToken, 1);\n  } else {\n    // multiple consecutive operators like `!!foo` should not have spaces in\n    // between then (we consider whole block as a single operator)\n    var operator = node.startToken;\n    var prev = _tk.findPrev(operator, _tk.isNotEmpty);\n    if (prev && prev.value === operator.value) {\n      _ws.limitBefore(operator, 0);\n    } else {\n      _ws.limitBefore(operator, 'UnaryExpressionOperator');\n    }\n    var next = _tk.findNext(operator, _tk.isNotEmpty);\n    if (next && next.value === operator.value) {\n      _ws.limitAfter(operator, 0);\n    } else {\n      _ws.limitAfter(operator, 'UnaryExpressionOperator');\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/UpdateExpression.js":"\"use strict\";\n\nvar _limit = require('../limit');\n\nexports.format = function UpdateExpression(node) {\n  // we only really care about spaces between the operator and the argument\n  if (node.startToken.value === node.operator) {\n    _limit.after(node.startToken, 'UpdateExpressionOperator');\n  } else {\n    _limit.before(node.endToken, 'UpdateExpressionOperator');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/VariableDeclaration.js":"\"use strict\";\n\nvar _br = require('rocambole-linebreak');\nvar _tk = require('rocambole-token');\nvar _ws = require('rocambole-whitespace');\n\nvar limit = require('../limit');\nvar helpers = require('../helpers');\n\n\nexports.format = function VariableDeclaration(node) {\n  var insideFor = node.parent.type === 'ForStatement';\n\n  node.declarations.forEach(function(declarator, i) {\n    var idStartToken = declarator.id.startToken;\n\n    // need to swap comma-first line break\n    var prevNonEmpty = _tk.findPrevNonEmpty(idStartToken);\n    if (i && prevNonEmpty.value === ',') {\n      if (_tk.isBr(prevNonEmpty.prev) || _tk.isBr(prevNonEmpty.prev.prev)) {\n        var beforeComma = _tk.findPrev(prevNonEmpty, function(t) {\n          return !_tk.isEmpty(t) && !_tk.isComment(t);\n        });\n        _ws.limit(prevNonEmpty, 0);\n        _tk.remove(prevNonEmpty);\n        _tk.after(beforeComma, prevNonEmpty);\n      }\n    }\n\n    if (!i && !_tk.isComment(_tk.findPrevNonEmpty(idStartToken))) {\n      // XXX: we don't allow line breaks or multiple spaces after \"var\"\n      // keyword for now (might change in the future)\n      _tk.removeEmptyAdjacentBefore(idStartToken);\n    } else if (!insideFor) {\n      _br.limit(\n        idStartToken,\n        declarator.init ? 'VariableName' : 'VariableDeclarationWithoutInit'\n      );\n    }\n    _ws.limitBefore(idStartToken, 'VariableName');\n\n    if (declarator.init) {\n      limit.after(declarator.id.endToken, 'VariableName');\n      var equalSign = _tk.findNext(declarator.id.endToken, '=');\n      var valueStart = _tk.findNextNonEmpty(equalSign);\n      _br.limitBefore(valueStart, 'VariableValue');\n      _ws.limitBefore(valueStart, 'VariableValue');\n      _br.limitAfter(declarator.endToken, 'VariableValue');\n      _ws.limitAfter(declarator.endToken, 'VariableValue');\n    }\n  });\n\n  // always add a space after the \"var\" keyword\n  _ws.limitAfter(node.startToken, 1);\n\n  if (_tk.isSemiColon(node.endToken)) {\n    _br.limit(node.endToken, 'VariableDeclarationSemiColon');\n    _ws.limit(node.endToken, 'VariableDeclarationSemiColon');\n  }\n};\n\n\nexports.getIndentEdges = function(node, opts) {\n  var edges = [];\n\n  var isMulti = node.declarations.length > 1;\n\n  if ((opts.MultipleVariableDeclaration && isMulti) ||\n    (opts.SingleVariableDeclaration && !isMulti)\n  ) {\n    edges.push(node);\n  }\n\n  node.declarations.forEach(function(declaration) {\n    var init = declaration.init;\n    if (helpers.shouldIndentChild(node, init, opts)) {\n      var end = init.endToken.value === ')' ?\n        _tk.findPrevNonEmpty(init.endToken) :\n        init.endToken.next;\n      edges.push({\n        level: opts['VariableDeclaration.' + init.type],\n        startToken: init.startToken,\n        endToken: end\n      });\n    }\n  });\n\n  return edges;\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/hooks/WhileStatement.js":"\"use strict\";\n\nvar _tk = require('rocambole-token');\nvar _limit = require('../limit');\n\n\nexports.format = function WhileStatement(node) {\n  var conditionalStart = _tk.findNext(node.startToken, '(');\n  var conditionalEnd = _tk.findPrev(node.body.startToken, ')');\n\n  _limit.around(conditionalStart, 'WhileStatementConditionalOpening');\n\n  if (node.body.type === 'BlockStatement') {\n    var bodyStart = node.body.startToken;\n    var bodyEnd = node.body.endToken;\n    _limit.around(bodyStart, 'WhileStatementOpeningBrace');\n    _limit.around(bodyEnd, 'WhileStatementClosingBrace');\n    _limit.around(conditionalEnd, 'WhileStatementConditionalClosing');\n  } else {\n    var next = _tk.findNextNonEmpty(conditionalEnd);\n    _limit.before(conditionalEnd, 'WhileStatementConditionalClosing');\n    if (_tk.isSemiColon(next)) {\n      _limit.after(conditionalEnd, 0);\n    } else {\n      _limit.after(conditionalEnd, 'WhileStatementConditionalClosing');\n    }\n  }\n};\n\n\nexports.getIndentEdges = function(node) {\n  var edges = [\n    {\n      startToken: _tk.findNext(node.startToken, '('),\n      endToken: _tk.findPrev(node.body.startToken, ')')\n    }\n  ];\n\n  if (node.body.type !== 'EmptyStatement') {\n    edges.push(node.body);\n  }\n\n  return edges;\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/preset/default.js":"module.exports = {\n  \"extends\": [\n    require('./default-indent'),\n    require('./default-linebreak-before'),\n    require('./default-linebreak-after'),\n    require('./default-whitespace-before'),\n    require('./default-whitespace-after')\n  ],\n\n  \"esformatter\": {\n    \"allowShebang\": true\n  },\n\n  \"indent\": {\n    \"value\": \"  \",\n    \"alignComments\": true,\n  },\n\n  \"lineBreak\": {\n    \"value\": \"\\n\"\n  },\n\n  \"whiteSpace\": {\n    \"value\": \" \",\n    \"removeTrailing\": 1\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/preset/default-indent.js":"module.exports = {\n  \"indent\": {\n    \"ArrayExpression\": 1,\n    \"ArrayPattern\": 1,\n    \"ArrowFunctionExpression\": 1,\n    \"AssignmentExpression\": 1,\n    \"AssignmentExpression.BinaryExpression\": 1,\n    \"AssignmentExpression.LogicalExpression\": 1,\n    \"AssignmentExpression.UnaryExpression\": 1,\n    \"BlockStatement\": 1,\n    \"CallExpression\": 1,\n    \"CallExpression.BinaryExpression\": 1,\n    \"CallExpression.LogicalExpression\": 1,\n    \"CallExpression.UnaryExpression\": 1,\n    \"CatchClause\": 1,\n    \"ClassDeclaration\": 1,\n    \"ClassExpression\": 1,\n    \"CommentInsideEmptyBlock\": 1,\n    \"ConditionalExpression\": 1,\n    \"DoWhileStatement\": 1,\n    \"ExportNamedDeclaration\": 1,\n    \"ForInStatement\": 1,\n    \"ForOfStatement\": 1,\n    \"ForStatement\": 1,\n    \"FunctionDeclaration\": 1,\n    \"FunctionExpression\": 1,\n    \"IfStatement\": 1,\n    \"ImportDeclaration\": 1,\n    \"MemberExpression\": 1,\n    \"MultipleVariableDeclaration\": 1,\n    \"NewExpression\": 1,\n    \"ObjectExpression\": 1,\n    \"ObjectExpression.BinaryExpression\": 1,\n    \"ObjectExpression.LogicalExpression\": 1,\n    \"ObjectExpression.UnaryExpression\": 1,\n    \"ObjectPattern\": 1,\n    \"ParameterList\": 1,\n    \"ReturnStatement\": 1,\n    \"SingleVariableDeclaration\": 0,\n    \"SwitchCase\": 1,\n    \"SwitchStatement\": 1,\n    \"TopLevelFunctionBlock\": 1,\n    \"TryStatement\": 1,\n    \"VariableDeclaration.BinaryExpression\": 1,\n    \"VariableDeclaration.LogicalExpression\": 1,\n    \"VariableDeclaration.UnaryExpression\": 1,\n    \"WhileStatement\": 1\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/preset/default-linebreak-before.js":"module.exports = {\n  \"lineBreak\": {\n    \"before\": {\n      \"ArrayPatternClosing\": 0,\n      \"ArrayPatternComma\": 0,\n      \"ArrayPatternOpening\": 0,\n      \"ArrowFunctionExpressionArrow\": 0,\n      \"ArrowFunctionExpressionClosingBrace\": \">=1\",\n      \"ArrowFunctionExpressionOpeningBrace\": 0,\n      \"AssignmentExpression\": \">=1\",\n      \"AssignmentOperator\": 0,\n      \"AssignmentPattern\": 0,\n      \"BlockStatementClosingBrace\": \">=1\",\n      \"BlockStatementOpeningBrace\": \">=1\",\n      \"BreakKeyword\": \">=1\",\n      \"CallExpression\": -1,\n      \"CallExpressionClosingParentheses\": -1,\n      \"CallExpressionOpeningParentheses\": 0,\n      \"CatchClosingBrace\": \">=1\",\n      \"CatchKeyword\": 0,\n      \"CatchOpeningBrace\": 0,\n      \"ClassClosingBrace\": \">=1\",\n      \"ClassDeclaration\": \">=1\",\n      \"ClassExpression\": \">=1\",\n      \"ClassExtendsKeyword\": 0,\n      \"ClassKeyword\": -1,\n      \"ClassOpeningBrace\": 0,\n      \"ConditionalExpression\": \">=1\",\n      \"DeleteOperator\": \">=1\",\n      \"DoWhileStatement\": \">=1\",\n      \"DoWhileStatementClosingBrace\": \">=1\",\n      \"DoWhileStatementOpeningBrace\": 0,\n      \"ElseIfStatement\": 0,\n      \"ElseIfStatementClosingBrace\": \">=1\",\n      \"ElseIfStatementOpeningBrace\": 0,\n      \"ElseStatement\": 0,\n      \"ElseStatementClosingBrace\": \">=1\",\n      \"ElseStatementOpeningBrace\": 0,\n      \"EmptyStatement\": -1,\n      \"EndOfFile\": -1,\n      \"ExportAllDeclaration\": \">=1\",\n      \"ExportDefaultDeclaration\": \">=1\",\n      \"ExportNamedDeclaration\": \">=1\",\n      \"FinallyClosingBrace\": \">=1\",\n      \"FinallyKeyword\": -1,\n      \"FinallyOpeningBrace\": 0,\n      \"ForInStatement\": \">=1\",\n      \"ForInStatementClosingBrace\": \">=1\",\n      \"ForInStatementExpressionClosing\": 0,\n      \"ForInStatementExpressionOpening\": 0,\n      \"ForInStatementOpeningBrace\": 0,\n      \"ForOfStatement\": \">=1\",\n      \"ForOfStatementClosingBrace\": \">=1\",\n      \"ForOfStatementExpressionClosing\": 0,\n      \"ForOfStatementExpressionOpening\": 0,\n      \"ForOfStatementOpeningBrace\": 0,\n      \"ForStatement\": \">=1\",\n      \"ForStatementClosingBrace\": \">=1\",\n      \"ForStatementExpressionClosing\": \"<2\",\n      \"ForStatementExpressionOpening\": 0,\n      \"ForStatementOpeningBrace\": 0,\n      \"FunctionDeclaration\": \">=1\",\n      \"FunctionDeclarationClosingBrace\": \">=1\",\n      \"FunctionDeclarationOpeningBrace\": 0,\n      \"FunctionExpression\": -1,\n      \"FunctionExpressionClosingBrace\": \">=1\",\n      \"FunctionExpressionOpeningBrace\": 0,\n      \"IIFEClosingParentheses\": 0,\n      \"IfStatement\": \">=1\",\n      \"IfStatementClosingBrace\": \">=1\",\n      \"IfStatementOpeningBrace\": 0,\n      \"LogicalExpression\": -1,\n      \"MemberExpressionClosing\": \"<2\",\n      \"MemberExpressionOpening\": 0,\n      \"MemberExpressionPeriod\": -1,\n      \"MethodDefinition\": \">=1\",\n      \"MethodDefinitionClosingBrace\": \">=1\",\n      \"MethodDefinitionOpeningBrace\": 0,\n      \"ModuleSpecifierClosingBrace\": 0,\n      \"ModuleSpecifierComma\": 0,\n      \"ModuleSpecifierOpeningBrace\": 0,\n      \"ObjectExpressionClosingBrace\": \">=1\",\n      \"ObjectPatternClosingBrace\": 0,\n      \"ObjectPatternComma\": 0,\n      \"ObjectPatternOpeningBrace\": 0,\n      \"Property\": \">=1\",\n      \"PropertyValue\": 0,\n      \"ReturnStatement\": -1,\n      \"SwitchCaseBlockEnd\": \">=1\",\n      \"SwitchCaseBlockStart\": 0,\n      \"SwitchCaseColon\": 0,\n      \"SwitchClosingBrace\": \">=1\",\n      \"SwitchOpeningBrace\": 0,\n      \"ThisExpression\": -1,\n      \"ThrowStatement\": \">=1\",\n      \"TryClosingBrace\": \">=1\",\n      \"TryKeyword\": -1,\n      \"TryOpeningBrace\": 0,\n      \"VariableDeclaration\": \">=1\",\n      \"VariableDeclarationSemiColon\": 0,\n      \"VariableDeclarationWithoutInit\": \">=1\",\n      \"VariableName\": \">=1\",\n      \"VariableValue\": 0,\n      \"WhileStatement\": \">=1\",\n      \"WhileStatementClosingBrace\": \">=1\",\n      \"WhileStatementOpeningBrace\": 0\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/preset/default-linebreak-after.js":"module.exports = {\n  \"lineBreak\": {\n    \"after\": {\n      \"ArrayPatternClosing\": 0,\n      \"ArrayPatternComma\": 0,\n      \"ArrayPatternOpening\": 0,\n      \"ArrowFunctionExpressionArrow\": 0,\n      \"ArrowFunctionExpressionClosingBrace\": -1,\n      \"ArrowFunctionExpressionOpeningBrace\": \">=1\",\n      \"AssignmentExpression\": \">=1\",\n      \"AssignmentOperator\": 0,\n      \"AssignmentPattern\": 0,\n      \"BlockStatementClosingBrace\": \">=1\",\n      \"BlockStatementOpeningBrace\": \">=1\",\n      \"BreakKeyword\": -1,\n      \"CallExpression\": -1,\n      \"CallExpressionClosingParentheses\": -1,\n      \"CallExpressionOpeningParentheses\": -1,\n      \"CatchClosingBrace\": \">=0\",\n      \"CatchKeyword\": 0,\n      \"CatchOpeningBrace\": \">=1\",\n      \"ClassClosingBrace\": \">=1\",\n      \"ClassDeclaration\": \">=1\",\n      \"ClassExpression\": \">=1\",\n      \"ClassExtendsKeyword\": 0,\n      \"ClassKeyword\": 0,\n      \"ClassOpeningBrace\": \">=1\",\n      \"ConditionalExpression\": \">=1\",\n      \"DeleteOperator\": \">=1\",\n      \"DoWhileStatement\": \">=1\",\n      \"DoWhileStatementClosingBrace\": 0,\n      \"DoWhileStatementOpeningBrace\": \">=1\",\n      \"ElseIfStatement\": \">=1\",\n      \"ElseIfStatementClosingBrace\": \">=1\",\n      \"ElseIfStatementOpeningBrace\": \">=1\",\n      \"ElseStatement\": \">=1\",\n      \"ElseStatementClosingBrace\": \">=1\",\n      \"ElseStatementOpeningBrace\": \">=1\",\n      \"EmptyStatement\": -1,\n      \"FinallyClosingBrace\": \">=1\",\n      \"FinallyKeyword\": -1,\n      \"FinallyOpeningBrace\": \">=1\",\n      \"ForInStatement\": \">=1\",\n      \"ForInStatementClosingBrace\": \">=1\",\n      \"ForInStatementExpressionClosing\": -1,\n      \"ForInStatementExpressionOpening\": \"<2\",\n      \"ForInStatementOpeningBrace\": \">=1\",\n      \"ForOfStatement\": \">=1\",\n      \"ForOfStatementClosingBrace\": \">=1\",\n      \"ForOfStatementExpressionClosing\": -1,\n      \"ForOfStatementExpressionOpening\": \"<2\",\n      \"ForOfStatementOpeningBrace\": \">=1\",\n      \"ForStatement\": \">=1\",\n      \"ForStatementClosingBrace\": \">=1\",\n      \"ForStatementExpressionClosing\": -1,\n      \"ForStatementExpressionOpening\": \"<2\",\n      \"ForStatementOpeningBrace\": \">=1\",\n      \"FunctionDeclaration\": \">=1\",\n      \"FunctionDeclarationClosingBrace\": \">=1\",\n      \"FunctionDeclarationOpeningBrace\": \">=1\",\n      \"FunctionExpression\": \">=1\",\n      \"FunctionExpressionClosingBrace\": -1,\n      \"FunctionExpressionOpeningBrace\": \">=1\",\n      \"IIFEOpeningParentheses\": 0,\n      \"IfStatement\": \">=1\",\n      \"IfStatementClosingBrace\": \">=1\",\n      \"IfStatementOpeningBrace\": \">=1\",\n      \"LogicalExpression\": -1,\n      \"MemberExpressionClosing\": \"<2\",\n      \"MemberExpressionOpening\": \"<2\",\n      \"MemberExpressionPeriod\": 0,\n      \"MethodDefinitionClosingBrace\": \">=1\",\n      \"MethodDefinitionOpeningBrace\": \">=1\",\n      \"ModuleSpecifierClosingBrace\": 0,\n      \"ModuleSpecifierComma\": 0,\n      \"ModuleSpecifierOpeningBrace\": 0,\n      \"ObjectExpressionOpeningBrace\": \">=1\",\n      \"ObjectPatternClosingBrace\": 0,\n      \"ObjectPatternComma\": 0,\n      \"ObjectPatternOpeningBrace\": 0,\n      \"Property\": 0,\n      \"PropertyName\": 0,\n      \"ReturnStatement\": -1,\n      \"SwitchCaseBlockEnd\": 1,\n      \"SwitchCaseBlockStart\": \">=1\",\n      \"SwitchCaseColon\": \">=1\",\n      \"SwitchClosingBrace\": \">=1\",\n      \"SwitchOpeningBrace\": \">=1\",\n      \"ThisExpression\": 0,\n      \"ThrowStatement\": \">=1\",\n      \"TryClosingBrace\": 0,\n      \"TryKeyword\": -1,\n      \"TryOpeningBrace\": \">=1\",\n      \"VariableDeclaration\": \">=1\",\n      \"VariableDeclarationSemiColon\": \">=1\",\n      \"VariableName\": 0,\n      \"VariableValue\": -1,\n      \"WhileStatement\": \">=1\",\n      \"WhileStatementClosingBrace\": \">=1\",\n      \"WhileStatementOpeningBrace\": \">=1\"\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/preset/default-whitespace-before.js":"module.exports = {\n  \"whiteSpace\": {\n    \"before\": {\n      \"ArgumentComma\": 0,\n      \"ArgumentList\": 0,\n      \"ArrayExpressionClosing\": 0,\n      \"ArrayExpressionComma\": 0,\n      \"ArrayExpressionOpening\": 0,\n      \"ArrayPatternClosing\": 0,\n      \"ArrayPatternComma\": 0,\n      \"ArrayPatternOpening\": 1,\n      \"ArrowFunctionExpressionArrow\": 1,\n      \"ArrowFunctionExpressionClosingBrace\": 0,\n      \"ArrowFunctionExpressionOpeningBrace\": 1,\n      \"AssignmentOperator\": 1,\n      \"AssignmentPattern\": 1,\n      \"BinaryExpression\": 0,\n      \"BinaryExpressionOperator\": 1,\n      \"BlockComment\": 1,\n      \"BlockStatementClosingBrace\": 1,\n      \"BlockStatementOpeningBrace\": 1,\n      \"CallExpression\": -1,\n      \"CallExpressionClosingParentheses\": -1,\n      \"CallExpressionOpeningParentheses\": 0,\n      \"CatchClosingBrace\": 1,\n      \"CatchKeyword\": 1,\n      \"CatchOpeningBrace\": 1,\n      \"CatchParameterList\": 0,\n      \"ClassClosingBrace\": 1,\n      \"ClassOpeningBrace\": 1,\n      \"CommaOperator\": 0,\n      \"ConditionalExpressionAlternate\": 1,\n      \"ConditionalExpressionConsequent\": 1,\n      \"DoWhileStatementClosingBrace\": 1,\n      \"DoWhileStatementConditional\": 1,\n      \"DoWhileStatementOpeningBrace\": 1,\n      \"ElseIfStatementClosingBrace\": 1,\n      \"ElseIfStatementOpeningBrace\": 1,\n      \"ElseStatementClosingBrace\": 1,\n      \"ElseStatementOpeningBrace\": 1,\n      \"EmptyStatement\": 0,\n      \"ExpressionClosingParentheses\": 0,\n      \"FinallyClosingBrace\": 1,\n      \"FinallyKeyword\": -1,\n      \"FinallyOpeningBrace\": 1,\n      \"ForInStatement\": 1,\n      \"ForInStatementClosingBrace\": 1,\n      \"ForInStatementExpressionClosing\": 0,\n      \"ForInStatementExpressionOpening\": 1,\n      \"ForInStatementOpeningBrace\": 1,\n      \"ForOfStatement\": 1,\n      \"ForOfStatementClosingBrace\": 1,\n      \"ForOfStatementExpressionClosing\": 0,\n      \"ForOfStatementExpressionOpening\": 1,\n      \"ForOfStatementOpeningBrace\": 1,\n      \"ForStatement\": 1,\n      \"ForStatementClosingBrace\": 1,\n      \"ForStatementExpressionClosing\": 0,\n      \"ForStatementExpressionOpening\": 1,\n      \"ForStatementOpeningBrace\": 1,\n      \"ForStatementSemicolon\": 0,\n      \"FunctionDeclarationClosingBrace\": 1,\n      \"FunctionDeclarationOpeningBrace\": 1,\n      \"FunctionExpressionClosingBrace\": 1,\n      \"FunctionExpressionOpeningBrace\": 1,\n      \"FunctionGeneratorAsterisk\": 0,\n      \"FunctionName\": 1,\n      \"IIFEClosingParentheses\": 0,\n      \"IfStatementClosingBrace\": 1,\n      \"IfStatementConditionalClosing\": 0,\n      \"IfStatementConditionalOpening\": 1,\n      \"IfStatementOpeningBrace\": 1,\n      \"LineComment\": 1,\n      \"LogicalExpressionOperator\": 1,\n      \"MemberExpressionClosing\": 0,\n      \"MemberExpressionOpening\": 0,\n      \"MemberExpressionPeriod\": 0,\n      \"ModuleSpecifierClosingBrace\": 1,\n      \"ModuleSpecifierComma\": 0,\n      \"ModuleSpecifierOpeningBrace\": 1,\n      \"ObjectExpressionClosingBrace\": 0,\n      \"ObjectExpressionOpeningBrace\": -1,\n      \"ObjectPatternClosingBrace\": 0,\n      \"ObjectPatternComma\": 0,\n      \"ObjectPatternOpeningBrace\": 1,\n      \"ParameterComma\": 0,\n      \"ParameterList\": 0,\n      \"Property\": 1,\n      \"PropertyValue\": 1,\n      \"SwitchCaseBlockEnd\": 1,\n      \"SwitchCaseBlockStart\": 1,\n      \"SwitchCaseColon\": 0,\n      \"SwitchDiscriminantClosing\": 0,\n      \"SwitchDiscriminantOpening\": 1,\n      \"ThrowKeyword\": 1,\n      \"TryClosingBrace\": 1,\n      \"TryKeyword\": -1,\n      \"TryOpeningBrace\": 1,\n      \"UnaryExpressionOperator\": 0,\n      \"UpdateExpressionOperator\": 0,\n      \"VariableDeclarationSemiColon\": 0,\n      \"VariableName\": 1,\n      \"VariableValue\": 1,\n      \"WhileStatementClosingBrace\": 1,\n      \"WhileStatementConditionalClosing\": 0,\n      \"WhileStatementConditionalOpening\": 1,\n      \"WhileStatementOpeningBrace\": 1\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/preset/default-whitespace-after.js":"module.exports = {\n  \"whiteSpace\": {\n    \"after\": {\n      \"ArgumentComma\": 1,\n      \"ArgumentList\": 0,\n      \"ArrayExpressionClosing\": 0,\n      \"ArrayExpressionComma\": 1,\n      \"ArrayExpressionOpening\": 0,\n      \"ArrayPatternClosing\": 1,\n      \"ArrayPatternComma\": 1,\n      \"ArrayPatternOpening\": 0,\n      \"ArrowFunctionExpressionArrow\": 1,\n      \"ArrowFunctionExpressionClosingBrace\": 0,\n      \"ArrowFunctionExpressionOpeningBrace\": 0,\n      \"AssignmentOperator\": 1,\n      \"AssignmentPattern\": 1,\n      \"BinaryExpression\": 0,\n      \"BinaryExpressionOperator\": 1,\n      \"BlockComment\": 1,\n      \"BlockStatementClosingBrace\": 1,\n      \"BlockStatementOpeningBrace\": 1,\n      \"CallExpression\": -1,\n      \"CallExpressionClosingParentheses\": -1,\n      \"CallExpressionOpeningParentheses\": -1,\n      \"CatchClosingBrace\": 1,\n      \"CatchKeyword\": 1,\n      \"CatchOpeningBrace\": 1,\n      \"CatchParameterList\": 0,\n      \"ClassClosingBrace\": 1,\n      \"ClassOpeningBrace\": 1,\n      \"CommaOperator\": 1,\n      \"ConditionalExpressionConsequent\": 1,\n      \"ConditionalExpressionTest\": 1,\n      \"DoWhileStatementBody\": 1,\n      \"DoWhileStatementClosingBrace\": 1,\n      \"DoWhileStatementOpeningBrace\": 1,\n      \"ElseIfStatementClosingBrace\": 1,\n      \"ElseIfStatementOpeningBrace\": 1,\n      \"ElseStatementClosingBrace\": 1,\n      \"ElseStatementOpeningBrace\": 1,\n      \"EmptyStatement\": 0,\n      \"ExpressionOpeningParentheses\": 0,\n      \"FinallyClosingBrace\": 1,\n      \"FinallyKeyword\": -1,\n      \"FinallyOpeningBrace\": 1,\n      \"ForInStatement\": 1,\n      \"ForInStatementClosingBrace\": 1,\n      \"ForInStatementExpressionClosing\": 1,\n      \"ForInStatementExpressionOpening\": 0,\n      \"ForInStatementOpeningBrace\": 1,\n      \"ForOfStatement\": 1,\n      \"ForOfStatementClosingBrace\": 1,\n      \"ForOfStatementExpressionClosing\": 1,\n      \"ForOfStatementExpressionOpening\": 0,\n      \"ForOfStatementOpeningBrace\": 1,\n      \"ForStatement\": 1,\n      \"ForStatementClosingBrace\": 1,\n      \"ForStatementExpressionClosing\": 1,\n      \"ForStatementExpressionOpening\": 0,\n      \"ForStatementOpeningBrace\": 1,\n      \"ForStatementSemicolon\": 1,\n      \"FunctionDeclarationClosingBrace\": 1,\n      \"FunctionDeclarationOpeningBrace\": 1,\n      \"FunctionExpressionClosingBrace\": 0,\n      \"FunctionExpressionOpeningBrace\": 1,\n      \"FunctionName\": 0,\n      \"FunctionReservedWord\": 0,\n      \"IIFEOpeningParentheses\": 0,\n      \"IfStatementClosingBrace\": 1,\n      \"IfStatementConditionalClosing\": 1,\n      \"IfStatementConditionalOpening\": 0,\n      \"IfStatementOpeningBrace\": 1,\n      \"LogicalExpressionOperator\": 1,\n      \"MemberExpressionClosing\": 0,\n      \"MemberExpressionOpening\": 0,\n      \"MemberExpressionPeriod\": 0,\n      \"MethodDefinitionName\": 0,\n      \"MethodName\": 0,\n      \"ModuleSpecifierClosingBrace\": 0,\n      \"ModuleSpecifierComma\": 1,\n      \"ModuleSpecifierOpeningBrace\": 1,\n      \"ObjectExpressionClosingBrace\": 0,\n      \"ObjectExpressionOpeningBrace\": 0,\n      \"ObjectPatternClosingBrace\": 1,\n      \"ObjectPatternComma\": 1,\n      \"ObjectPatternOpeningBrace\": 0,\n      \"ParameterComma\": 1,\n      \"ParameterList\": 0,\n      \"PropertyName\": 0,\n      \"PropertyValue\": 0,\n      \"SwitchDiscriminantClosing\": 1,\n      \"SwitchDiscriminantOpening\": 0,\n      \"ThrowKeyword\": 1,\n      \"TryClosingBrace\": 1,\n      \"TryKeyword\": -1,\n      \"TryOpeningBrace\": 1,\n      \"UnaryExpressionOperator\": 0,\n      \"UpdateExpressionOperator\": 0,\n      \"VariableDeclarationSemiColon\": 0,\n      \"VariableName\": 1,\n      \"VariableValue\": 0,\n      \"WhileStatementClosingBrace\": 1,\n      \"WhileStatementConditionalClosing\": 1,\n      \"WhileStatementConditionalOpening\": 0,\n      \"WhileStatementOpeningBrace\": 1\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/preset/jquery.js":"module.exports = {\n  \"extends\": [\n    require('./default')\n  ],\n\n  \"indent\": {\n    \"value\": \"\\t\",\n    \"IfStatementConditional\": 2,\n    \"SwitchStatement\": 0,\n    \"TopLevelFunctionBlock\": 0\n  },\n\n  \"lineBreak\": {\n    \"before\": {\n      \"ObjectExpressionOpeningBrace\": -1,\n      \"ObjectExpressionClosingBrace\": -1,\n      \"Property\": -1,\n      \"VariableDeclarationWithoutInit\": 0\n    },\n\n    \"after\": {\n      \"AssignmentOperator\": -1,\n      \"ObjectExpressionOpeningBrace\": -1,\n      \"ObjectExpressionClosingBrace\": -1,\n      \"Property\": -1\n    }\n  },\n\n  \"whiteSpace\": {\n    \"before\": {\n      \"ArgumentList\": 1,\n      \"ArrayExpressionClosing\": 1,\n      \"CatchParameterList\": 1,\n      \"ExpressionClosingParentheses\": 1,\n      \"ForInStatementExpressionClosing\": 1,\n      \"ForOfStatementExpressionClosing\": 1,\n      \"ForStatementExpressionClosing\": 1,\n      \"IfStatementConditionalClosing\": 1,\n      \"IIFEClosingParentheses\": 1,\n      \"MemberExpressionClosing\": 1,\n      \"ObjectExpressionClosingBrace\": 1,\n      \"ParameterList\": 1,\n      \"SwitchDiscriminantClosing\": 1,\n      \"WhileStatementConditionalClosing\": 1\n    },\n    \"after\": {\n      \"ArgumentList\": 1,\n      \"ArrayExpressionOpening\": 1,\n      \"CatchParameterList\": 1,\n      \"ExpressionOpeningParentheses\": 1,\n      \"ForInStatementExpressionOpening\": 1,\n      \"ForOfStatementExpressionOpening\": 1,\n      \"ForStatementExpressionOpening\": 1,\n      \"IfStatementConditionalOpening\": 1,\n      \"IIFEOpeningParentheses\": 1,\n      \"MemberExpressionOpening\": 1,\n      \"ObjectExpressionOpeningBrace\": 1,\n      \"ParameterList\": 1,\n      \"PropertyValue\": -1,\n      \"SwitchDiscriminantOpening\": 1,\n      \"WhileStatementConditionalOpening\": 1\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter-parser/esformatter-parser.js":"'use strict';\n\nvar acornToEsprima = require('acorn-to-esprima');\nvar babelTraverse = require('babel-traverse').default;\nvar babylon = require('babylon');\nvar rocambole = require('rocambole');\n\n// need to skip extra properties from babylon otherwise we would format more\n// nodes than we need and it also confuses rocambole about {start|end}Token\nrocambole.BYPASS_RECURSION.loc = true;\nrocambole.BYPASS_RECURSION.leadingComments = true;\nrocambole.BYPASS_RECURSION.trailingComments = true;\n\nexports.parse = function(str, opts) {\n  rocambole.parseFn = babelEslint;\n  return rocambole.parse(str, opts || exports.defaultOptions);\n};\n\nexports.babylon = babylon;\n\nfunction babelEslint(str, opts) {\n  var ast = (exports.babylon || babylon).parse(str, opts);\n\n  // remove EOF token, eslint doesn't use this for anything and it interferes with some rules\n  // see https://github.com/babel/babel-eslint/issues/2 for more info\n  // todo: find a more elegant way to do this\n  ast.tokens.pop();\n\n  // convert tokens\n  ast.tokens = acornToEsprima.toTokens(ast.tokens, babylon.tokTypes, str);\n\n  // add comments\n  acornToEsprima.convertComments(ast.comments);\n\n  // transform esprima and acorn divergent nodes\n  acornToEsprima.toAST(ast, babelTraverse, str);\n\n  // remove File\n  ast.type = 'Program';\n  ast.sourceType = ast.program.sourceType;\n  ast.directives = ast.program.directives;\n  ast.body = ast.program.body;\n  delete ast.program;\n  delete ast._paths;\n\n  acornToEsprima.attachComments(ast, ast.comments, ast.tokens);\n\n  return ast;\n}\n\nexports.defaultOptions = {\n  allowImportExportEverywhere: false, // consistent with espree\n  allowReturnOutsideFunction: true,\n  allowSuperOutsideMethod: true,\n  locations: true,\n  onComment: [],\n  onToken: [],\n  plugins: [\n    'asyncFunctions',\n    'asyncGenerators',\n    'classConstructorCall',\n    'classProperties',\n    'decorators',\n    'doExpressions',\n    'exponentiationOperator',\n    'exportExtensions',\n    'flow',\n    'functionBind',\n    'functionSent',\n    'jsx',\n    'objectRestSpread',\n    'trailingFunctionCommas'\n  ],\n  ranges: true,\n  sourceType: 'module',\n  strictMode: true\n};\n\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/transform.js":"'use strict';\n\nvar _br = require('rocambole-linebreak');\nvar _options = require('./options');\nvar _tk = require('rocambole-token');\nvar _ws = require('rocambole-whitespace');\nvar addBrAroundNode = require('./lineBreakAroundNode');\nvar expressionParentheses = require('./hooks/expressionParentheses');\nvar hooks = require('./hooks');\nvar indent = require('./indent');\nvar plugins = require('./plugins');\nvar rocambole = require('rocambole');\n\n// ---\n\nvar _shouldRemoveTrailingWs;\n\n// ---\n\nexports = module.exports = transform;\n// used to make sure we don't call setOptions twice when executing `transform`\n// from inside `format`\nexports.BYPASS_OPTIONS = {};\n\n// ---\n\nfunction transform(ast, opts) {\n  if (opts !== exports.BYPASS_OPTIONS) {\n    _options.set(opts);\n  }\n  // we store this here to avoid calling `_options.get` for each token\n  _shouldRemoveTrailingWs = Boolean(_options.get('whiteSpace.removeTrailing'));\n\n  plugins.transformBefore(ast);\n\n  _tk.eachInBetween(ast.startToken, ast.endToken, preprocessToken);\n  rocambole.moonwalk(ast, transformNode);\n  _tk.eachInBetween(ast.startToken, ast.endToken, postprocessToken);\n  _br.limitBeforeEndOfFile(ast);\n\n  // indent should come after all other transformations since it depends on\n  // line breaks caused by \"parent\" nodes, otherwise it will cause conflicts.\n  // it should also happen after the postprocessToken since it adds line breaks\n  // before/after comments and that changes the indent logic\n  indent.transform(ast);\n\n  // plugin transformation comes after the indentation since we assume user\n  // knows what he is doing (will increase flexibility and allow plugin to\n  // override the indentation logic)\n  // we have an alias \"transform\" to match v0.3 API, but favor `transformAfter`\n  // moving forward. (we might deprecate \"transform\" in the future)\n  plugins.transform(ast);\n  plugins.transformAfter(ast);\n\n  return ast;\n}\n\n\nfunction transformNode(node) {\n  plugins.nodeBefore(node);\n  addBrAroundNode(node);\n\n  var hook = hooks[node.type];\n  if (hook && 'format' in hook) {\n    hook.format(node);\n  }\n\n  // empty program doesn't have startToken or endToken\n  if (node.startToken) {\n    // automatic white space comes afterwards since line breaks introduced by\n    // the hooks affects it\n    _ws.limitBefore(node.startToken, node.type);\n    _ws.limitAfter(node.endToken, node.type);\n  }\n\n  // handle parenthesis automatically since it is needed by multiple node types\n  // and it avoids code duplication and reduces complexity of each hook\n  expressionParentheses.addSpaceInside(node);\n  plugins.nodeAfter(node);\n}\n\n\nfunction preprocessToken(token) {\n  if (_tk.isComment(token)) {\n    _br.limit(token, token.type);\n  }\n  plugins.tokenBefore(token);\n}\n\n\nfunction postprocessToken(token) {\n  if (_tk.isComment(token)) {\n    processComment(token);\n  } else if (_shouldRemoveTrailingWs && _tk.isWs(token)) {\n    removeTrailingWs(token);\n  }\n  plugins.tokenAfter(token);\n}\n\n\nfunction processComment(token) {\n  _ws.limitBefore(token, token.type);\n  // only block comment needs space afterwards\n  if (token.type === 'BlockComment') {\n    _ws.limitAfter(token, token.type);\n    return;\n  }\n\n  // CommentGroup is composed of multiple LineComment\n  var prev = _tk.findPrevNonEmpty(token);\n  var next = _tk.findNextNonEmpty(token);\n  if (!_tk.isComment(prev)) {\n    _br.limitBefore(token, 'CommentGroup');\n  }\n  if (!_tk.isComment(next)) {\n    _br.limitAfter(token, 'CommentGroup');\n  }\n}\n\n\nfunction removeTrailingWs(token) {\n  if (_tk.isBr(token.next) || !token.next) {\n    _tk.remove(token);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/lineBreakAroundNode.js":"'use strict';\n\n// this module is used for automatic line break around nodes.\n\n\nvar _tk = require('rocambole-token');\nvar _br = require('rocambole-linebreak');\nvar debugAround = require('debug')('esformatter:br:around');\n\n\n// ---\n\n\nmodule.exports = aroundNodeIfNeeded;\nfunction aroundNodeIfNeeded(node) {\n  var shouldLimit = shouldLimitLineBreakAroundNode(node);\n  debugAround('[aroundNodeIfNeeded] type: %s, shouldLimit: %s, ', node.type, shouldLimit);\n  if (!shouldLimit) return;\n\n  var type = node.type;\n  _br.limitBefore(node.startToken, type);\n\n  if (_tk.isSemiColon(node.endToken)) {\n    _br.limitAfter(node.endToken, type);\n  }\n}\n\n\n\n// tokens that only break line for special reasons\nvar CONTEXTUAL_LINE_BREAK = {\n  AssignmentExpression: 1,\n  ConditionalExpression: 1,\n  CallExpression: 1,\n  ExpressionStatement: 1,\n  SequenceExpression: 1,\n  LogicalExpression: 1,\n  VariableDeclaration: 1\n};\n\n// bypass automatic line break of direct child\nvar BYPASS_CHILD_LINE_BREAK = {\n  CallExpression: 1,\n  DoWhileStatement: 1,\n  IfStatement: 1,\n  WhileStatement: 1,\n  ForStatement: 1,\n  ForInStatement: 1,\n  ForOfStatement: 1,\n  ReturnStatement: 1,\n  ThrowStatement: 1\n};\n\n// add line break only if great parent is one of these\nvar CONTEXTUAL_LINE_BREAK_GREAT_PARENTS = {\n  Program: 1,\n  BlockStatement: 1,\n  IfStatement: 1,\n  FunctionExpression: 1\n};\n\nfunction shouldLimitLineBreakAroundNode(node) {\n\n  if (node.parent) {\n    // EmptyStatement shouldn't cause line breaks by default since user might\n    // be using asi and it's common to add it to begin of line when needed\n    if (node.parent.prev &&\n      node.parent.prev.type === 'EmptyStatement') {\n      return false;\n    }\n    // it is on root it should cause line breaks\n    if (node.parent.type === 'Program') {\n      return true;\n    }\n    // if inside \"if\" test we change the rules since you probaly don't\n    // want to change the line break of the input (\"test\" can contain\n    // AssignmentExpression, SequenceExpression, BinaryExpression, ...)\n    if (isInsideIfTest(node)) {\n      return false;\n    }\n  }\n\n  if (node.type === 'Property' && node.parent.type === 'ObjectPattern') {\n    // Property should not break if inside `ObjectPattern`\n    return false;\n  }\n\n  if (!(node.type in CONTEXTUAL_LINE_BREAK)) {\n    return true;\n  }\n  if (node.parent.type in BYPASS_CHILD_LINE_BREAK) {\n    return false;\n  }\n\n  // iife\n  if (node.type === 'CallExpression' &&\n    node.callee.type === 'FunctionExpression') {\n    return false;\n  }\n\n  var gp = node.parent.parent;\n  if (gp && gp.type in CONTEXTUAL_LINE_BREAK_GREAT_PARENTS) {\n    return true;\n  }\n\n  return false;\n}\n\n\nfunction isInsideIfTest(node) {\n  if (node.parent && node.parent.type === 'IfStatement') {\n    return node === node.parent.test;\n  }\n  // we don't check further than great parent since it's \"expensive\" and we\n  // consider it as an edge case (you probably should not have too much logic\n  // inside the \"test\")\n  var greatParent = node.parent && node.parent.parent;\n  return greatParent && greatParent.type === 'IfStatement' &&\n    node.parent === greatParent.test;\n}\n","/home/travis/build/npmtest/node-npmtest-esformatter/node_modules/esformatter/lib/cli.js":"'use strict';\n\nvar esformatter = require('../lib/esformatter');\nvar fs = require('fs');\nvar glob = require('glob');\nvar merge = require('mout/object/merge');\nvar minimist = require('minimist');\nvar minimatch = require('minimatch');\nvar options = require('./options');\nvar path = require('path');\nvar stdin = require('stdin');\nvar supportsColor = require('supports-color');\n\nvar parseOpts = {\n  'boolean': [\n    'help',\n    'version',\n    'i',\n    'diff',\n    'diff-unified',\n    'no-color',\n    'color'\n  ],\n  'alias': {\n    'h': 'help',\n    'v': 'version',\n    'c': 'config',\n    'p': 'preset'\n  },\n  'string': [\n    'ignore'\n  ]\n};\n\n\n// exit code should be !== 0 if we find any errors during execution\nexports.exitCode = 0;\n\n\n// allow mocking/replacing the stdout/stderr\nexports.stdout = process.stdout;\nexports.stderr = process.stderr;\n\n\nexports.parse = function(arr) {\n  var argv = minimist(arr, parseOpts);\n\n  if (argv.plugins) {\n    argv.plugins = argv.plugins.split(',');\n  }\n\n  return argv;\n};\n\n\nexports.run = function(argv) {\n  // reset error flag at each run\n  exports.exitCode = 0;\n\n  if (argv.help) {\n    var help = fs.readFileSync(path.join(__dirname, '../doc/cli.txt'));\n    exports.stderr.write(help);\n    return;\n  }\n\n  if (argv.version) {\n    var pkg = require('../package.json');\n    exports.stderr.write('esformatter v' + pkg.version + '\\n');\n    return;\n  }\n\n  if (argv.i && (argv.diff || argv['diff-unified'])) {\n    logError(\n      'Error: \"--diff\" and \"--diff-unified\" flags ' +\n      'can\\'t be used together with the \"-i\" flag.'\n    );\n    return;\n  }\n\n  run(argv);\n};\n\n\nfunction run(argv) {\n  var files = argv._;\n\n  if (!files.length) {\n    stdin(function(source) {\n      toConsole(source, null, argv);\n    });\n    return;\n  }\n\n  files = expandGlobs(files, argv.ignore);\n\n  if (argv.i) {\n    files.forEach(function(file) {\n      formatToSelf(file, argv);\n    });\n    return;\n  }\n\n  files.forEach(function(file) {\n    toConsole(getSource(file), file, argv);\n  });\n}\n\n\n// we are handling errors this way instead of prematurely terminating the\n// program because user might be editing multiple files at once and error\n// might only be present on a single file\nfunction logError(e) {\n  var msg = typeof e === 'string' ? e : e.message;\n\n  // esprima.parse errors are in the format 'Line 123: Unexpected token &'\n  // we support both formats since users might replace the parser\n  if ((/Line \\d+:/).test(msg)) {\n    // convert into \"Error: <filepath>:<line> <error_message>\"\n    msg = 'Error: ' + msg.replace(/[^\\d]+(\\d+): (.+)/, e.file + ':$1 $2');\n  } else {\n    // babylon.parse errors are in the format 'Unexpected token (0:4)'\n    var m = (/^([^\\(]+)\\s\\((\\d+):(\\d+)\\)/).exec(msg);\n    if (m) {\n      // convert into \"Error: <filepath>:<line>:<char> <error_message>\"\n      msg = 'Error: ' + e.file + ':' + m[2] + ':' + m[3] + ' ' + m[1];\n    } else if (msg.indexOf('Error:') < 0) {\n      msg = 'Error: ' + (e.file ? e.file + ' ' : '') + msg;\n    }\n  }\n\n  // set the error flag to true to use an exit code !== 0\n  exports.exitCode = 1;\n\n  // we don't call console.error directly to make it possible to mock during\n  // unit tests\n  exports.stderr.write(msg + '\\n');\n\n  if (e.stack) {\n    exports.stderr.write(e.stack + '\\n');\n  }\n}\n\n\nfunction expandGlobs(filePaths, ignore) {\n  return filePaths.reduce(function(arr, file) {\n    // if file path contains \"magical chars\" (glob) we expand it, otherwise we\n    // simply use the file path (`push` is faster than `concat` and avoid `fs`)\n    if (glob.hasMagic(file)) {\n      return arr.concat(glob.sync(file, {\n        ignore: ignore,\n        // we want to return the glob itself to report that it didn't find any\n        // files, better to giver clear error messages than to fail silently\n        nonull: true,\n        nodir: true\n      }));\n    }\n    if (\n      !ignore ||\n      !minimatch(file, ignore, {\n        // `dot:true` to follow same behavior as `glob.sync:ignore`\n        dot: true\n      })\n    ) {\n      arr.push(file);\n    }\n    return arr;\n  }, []);\n}\n\n\nfunction getSource(file) {\n  try {\n    return fs.readFileSync(file).toString();\n  } catch (e) {\n    logError('Can\\'t read source file. Exception: ' + e.message);\n  }\n}\n\n\nfunction getConfig(filePath, argv) {\n  // if user sets the \"preset\" we don't load any other config file\n  // we assume the \"preset\" overrides any user settings\n  if (argv.preset || argv.root) {\n    return argv;\n  }\n\n  try {\n    // we only load \".esformatter\" or \"package.json\" file if user did not\n    // provide a config file as argument, that way we allow user to override\n    // the behavior\n    var config = argv.config ?\n      options.loadAndParseConfig(argv.config) :\n      options.getRc(filePath);\n\n    // we always merge the argv to allow user to override the default settings\n    return merge(config, argv);\n  } catch (e) {\n    logError({\n      message: e.message,\n      file: filePath,\n    });\n  }\n}\n\n\nfunction toConsole(source, file, argv) {\n  var config = getConfig(file, argv);\n  if (!source || !config) return;\n  try {\n    var result;\n\n    if (argv.diff || argv['diff-unified']) {\n      var method = argv.diff ? 'chars' : 'unified';\n      if (!supportsColor) {\n        method = 'unifiedNoColor';\n      }\n      result = esformatter.diff[method](source, config, file);\n      if (result) {\n        exports.exitCode = 1;\n        // we are using stdout even tho it's considered an \"error\" because user\n        // might want to pipe multiple tools and diff(1) also outputs to stdout\n        exports.stdout.write(result);\n      }\n      return;\n    }\n\n    result = esformatter.format(source, config);\n    // do not use console.log since it adds a line break at the end\n    exports.stdout.write(result);\n\n  } catch (e) {\n    logError({\n      stack: e.stack,\n      message: e.message,\n      file: (file || 'stdin')\n    });\n  }\n}\n\n\nfunction formatToSelf(file, argv) {\n  var source = getSource(file);\n  var config = getConfig(file, argv);\n  if (!source || !config) return;\n  try {\n    fs.writeFileSync(file, esformatter.format(source, config));\n  } catch (e) {\n    logError({\n      stack: e.stack,\n      message: e.message,\n      file: file\n    });\n  }\n}\n"}